{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/Image/hei1.jpeg","path":"Image/hei1.jpeg","modified":1,"renderable":0},{"_id":"source/Image/hei2.jpeg","path":"Image/hei2.jpeg","modified":1,"renderable":0},{"_id":"source/Image/hei3.jpg","path":"Image/hei3.jpg","modified":1,"renderable":0},{"_id":"source/Image/wxpay.png","path":"Image/wxpay.png","modified":1,"renderable":0},{"_id":"source/Image/zzh.webp","path":"Image/zzh.webp","modified":1,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/main.css","path":"main.css","modified":1,"renderable":1},{"_id":"source/Image/alipay.png","path":"Image/alipay.png","modified":1,"renderable":0},{"_id":"source/Image/zzh-min.jpg","path":"Image/zzh-min.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.svg","path":"fonts/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.svg","path":"fonts/tooltip.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/Image/xwz.png","path":"Image/xwz.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/slider.js","path":"slider.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/main.js","path":"main.js","modified":1,"renderable":1},{"_id":"source/Image/zzh.jpg","path":"Image/zzh.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"205d328c080d6176ae2a52a7083dd307ca757d09","modified":1480402364382},{"_id":"themes/hexo-theme-yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1481603470715},{"_id":"themes/hexo-theme-yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1481603470716},{"_id":"themes/hexo-theme-yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1481603470717},{"_id":"themes/hexo-theme-yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1481603470717},{"_id":"themes/hexo-theme-yilia/README.md","hash":"6288a9a9809f1d14d3517660dc7fda03f7c4d4cc","modified":1481603470719},{"_id":"themes/hexo-theme-yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1481603470718},{"_id":"themes/hexo-theme-yilia/_config.yml","hash":"f883d6bd5f268f67894ecfccc2d2b6b488799841","modified":1481617391954},{"_id":"themes/hexo-theme-yilia/package.json","hash":"a53faf4a97607b54ea59d5268743fa85d573931f","modified":1481603470743},{"_id":"themes/hexo-theme-yilia/webpack.config.js","hash":"cce70cea8a8954503be8f527ee2377501dbabb1c","modified":1481603470800},{"_id":"source/_posts/hello-world.md_bak","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1480387454821},{"_id":"source/_posts/python_1.md","hash":"d8d91c35ff81a54398ce0cc42b5df32711270602","modified":1481615884892},{"_id":"source/_posts/python_yield1.md","hash":"d85a56284ebd453a9c8eb0863b2c248c6572d10d","modified":1481717416093},{"_id":"source/_posts/zyt.md","hash":"c3478f0229ad28cc4a290797431227ca10bf49ab","modified":1480790225734},{"_id":"source/_posts/怀抱冥顽的热忱看草木渐深.md_bak","hash":"6e55962fdb06b02cb695319254174a22a94badf6","modified":1480429568102},{"_id":"source/_posts/林宥嘉：他説好：）.md","hash":"ae5739f62685eef5f792dc7623a874895377c556","modified":1480790347019},{"_id":"source/_posts/神经衰弱吗.md_bak","hash":"740df8946356ce9fb97a23c7fa4ffc2b124c881e","modified":1480792660529},{"_id":"source/_posts/第一篇blog.md_bak","hash":"528cb3746325c757aaed73596643f26a2b0ddfe3","modified":1480408707440},{"_id":"source/Image/hei1.jpeg","hash":"8f7e9c8006988df83629b9c29bc143ab379f8e05","modified":1480582897108},{"_id":"source/Image/hei2.jpeg","hash":"f9d8a150a7a740cdd96745acb370bc9e8576eb75","modified":1480582919055},{"_id":"source/Image/hei3.jpg","hash":"3394e7cc81a8073d00e2e13d5f437dc81f7816af","modified":1480582970523},{"_id":"source/Image/wxpay.png","hash":"d92c865cac8cb0ff9c13990aa88c5c91ea5bf6e5","modified":1480560381400},{"_id":"source/Image/zzh.webp","hash":"8afcebaa305001225768a037e8634ddd8852f337","modified":1481262270895},{"_id":"source/怀抱冥顽的热忱看草木渐深/index.md","hash":"846e4cea74a7f315dd3575843707942e21f6a24d","modified":1480389954951},{"_id":"themes/hexo-theme-yilia/.git/COMMIT_EDITMSG","hash":"3e7027a69e354783126676d3cf9c91afe7d3dfb3","modified":1481618752187},{"_id":"themes/hexo-theme-yilia/.git/FETCH_HEAD","hash":"eedc2d2f2238c3dd676bec48bd3f936993eae71a","modified":1481611196079},{"_id":"themes/hexo-theme-yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1481603470701},{"_id":"themes/hexo-theme-yilia/.git/ORIG_HEAD","hash":"a2f089b96472ecfd55929584feb3bb13f4100c6c","modified":1481611200774},{"_id":"themes/hexo-theme-yilia/.git/config","hash":"efc5f484476cd0d2f7dce3cf3b911dac8ba2df8f","modified":1481603470712},{"_id":"themes/hexo-theme-yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1481603409941},{"_id":"themes/hexo-theme-yilia/.git/index","hash":"fcf29db0b961f0b2ba516c71f881fc798e80f584","modified":1481707079152},{"_id":"themes/hexo-theme-yilia/.git/packed-refs","hash":"3f3d5db431f26cb7cbe69dc50cb68242abe643de","modified":1481603470693},{"_id":"themes/hexo-theme-yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1481603470720},{"_id":"themes/hexo-theme-yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1481603470721},{"_id":"themes/hexo-theme-yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1481603470721},{"_id":"themes/hexo-theme-yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1481603470722},{"_id":"themes/hexo-theme-yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1481603470722},{"_id":"themes/hexo-theme-yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1481603470723},{"_id":"themes/hexo-theme-yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1481603470724},{"_id":"themes/hexo-theme-yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1481603470739},{"_id":"themes/hexo-theme-yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1481603470739},{"_id":"themes/hexo-theme-yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1481603470740},{"_id":"themes/hexo-theme-yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1481603470740},{"_id":"themes/hexo-theme-yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481603470741},{"_id":"themes/hexo-theme-yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481603470742},{"_id":"themes/hexo-theme-yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1481603470742},{"_id":"themes/hexo-theme-yilia/source/main.css","hash":"978d85fb60d7b3fd3e1af41c84bdfcc8255ae0d0","modified":1481603470792},{"_id":"source/Image/alipay.png","hash":"e56082101433ea0d328a2aba5910622c0a7a030d","modified":1480560421271},{"_id":"source/Image/zzh-min.jpg","hash":"1065f6aa85fd04a7d38dccdadb5551860a449a4f","modified":1481263432749},{"_id":"source/_posts/python_1/hei1.jpeg","hash":"8f7e9c8006988df83629b9c29bc143ab379f8e05","modified":1480582897108},{"_id":"source/_posts/python_1/hei2.jpeg","hash":"f9d8a150a7a740cdd96745acb370bc9e8576eb75","modified":1480582919055},{"_id":"themes/hexo-theme-yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1481603409943},{"_id":"themes/hexo-theme-yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1481603409942},{"_id":"themes/hexo-theme-yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1481603409943},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1481603409945},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1481603409944},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1481603409946},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1481603409945},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1481603409947},{"_id":"themes/hexo-theme-yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1481603409947},{"_id":"themes/hexo-theme-yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1481603409948},{"_id":"themes/hexo-theme-yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1481603409949},{"_id":"themes/hexo-theme-yilia/.git/logs/HEAD","hash":"fa656ddee5aece999063644b7d7fe92e544f9e0c","modified":1481618752193},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1481603470725},{"_id":"themes/hexo-theme-yilia/layout/_partial/after-footer.ejs","hash":"142c68ba46c1bcb0fa3922014b35f3c2c3ac9c9c","modified":1481603470725},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1481603470726},{"_id":"themes/hexo-theme-yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1481603470727},{"_id":"themes/hexo-theme-yilia/layout/_partial/article.ejs","hash":"6555448b2bd3e0aa1fa3bbcfc714b0d1dc7d3862","modified":1481603470727},{"_id":"themes/hexo-theme-yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1481603470728},{"_id":"themes/hexo-theme-yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1481603470729},{"_id":"themes/hexo-theme-yilia/layout/_partial/head.ejs","hash":"211f8b77697381d759ae12a9a82f85792250f6ce","modified":1481707048509},{"_id":"themes/hexo-theme-yilia/layout/_partial/left-col.ejs","hash":"1e63c86574f2b2dab3908db0c9981d3549202cd2","modified":1481603470731},{"_id":"themes/hexo-theme-yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1481603470730},{"_id":"themes/hexo-theme-yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1481603470731},{"_id":"themes/hexo-theme-yilia/layout/_partial/mobile-nav.ejs","hash":"7d04a2512973a6c1e62f5175dd818a82cfa7824b","modified":1481603470732},{"_id":"themes/hexo-theme-yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1481603470738},{"_id":"themes/hexo-theme-yilia/layout/_partial/tools.ejs","hash":"449ab069f57fa13c295bd9c8ebb936472a602cb1","modified":1481603470737},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.eot","hash":"a6048d19579aa03fa2e0cf6f4ea0c91cc9906946","modified":1481603470785},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1481603470784},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.svg","hash":"7c4d7a123d44d525f322076b74100493a735d9be","modified":1481603470785},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.ttf","hash":"4eecc4e6e094525636c66a0f036d9d136eb043b4","modified":1481603470786},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.woff","hash":"3b5c92c260005b654d2cb54e3d44c7a79e5a52b9","modified":1481603470787},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1481603470788},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1481603470789},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1481603470790},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1481603470790},{"_id":"themes/hexo-theme-yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1481603470744},{"_id":"themes/hexo-theme-yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1481603470746},{"_id":"themes/hexo-theme-yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1481603470745},{"_id":"themes/hexo-theme-yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1481603470747},{"_id":"themes/hexo-theme-yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1481603470748},{"_id":"themes/hexo-theme-yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1481603470748},{"_id":"themes/hexo-theme-yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1481603470749},{"_id":"themes/hexo-theme-yilia/source-src/css/duoshuo.scss","hash":"8eb9678e2f88da64436d75e5fde5c84bd52f7e17","modified":1481603470754},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts.scss","hash":"55622fe3cfcba698fc7e0c350886ef8577eb6183","modified":1481603470754},{"_id":"themes/hexo-theme-yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1481603470759},{"_id":"themes/hexo-theme-yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1481603470759},{"_id":"themes/hexo-theme-yilia/source-src/css/grid.scss","hash":"78fae4d9ea57aa81c7cd02b1de13754b164ca32a","modified":1481603470760},{"_id":"themes/hexo-theme-yilia/source-src/css/highlight.scss","hash":"0267e2febaef284cf319235435643232fdeee0c9","modified":1481603470761},{"_id":"themes/hexo-theme-yilia/source-src/css/left.scss","hash":"338b6a84eed60412d0dd3d64525dbb4c8e8f6b94","modified":1481603470763},{"_id":"themes/hexo-theme-yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1481603470764},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile-slider.scss","hash":"facd3d41bc9b2d2c6134fc0fbd379a3b0c18476b","modified":1481603470764},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile.scss","hash":"d5ead4f0787e72dea76a1e2bc114edc82e744451","modified":1481603470765},{"_id":"themes/hexo-theme-yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1481603470766},{"_id":"themes/hexo-theme-yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1481603470767},{"_id":"themes/hexo-theme-yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1481603470768},{"_id":"themes/hexo-theme-yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1481603470767},{"_id":"themes/hexo-theme-yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1481603470769},{"_id":"themes/hexo-theme-yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1481603470769},{"_id":"themes/hexo-theme-yilia/source-src/css/tools.scss","hash":"f46123cffed3d5f6db8e67d490b28f90d7c6b052","modified":1481603470771},{"_id":"themes/hexo-theme-yilia/source-src/css/tags.scss","hash":"ca0d8adf1a59fe6263d552b9d90b3ca351ad631b","modified":1481603470770},{"_id":"themes/hexo-theme-yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1481603470771},{"_id":"themes/hexo-theme-yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1481603470776},{"_id":"themes/hexo-theme-yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1481603470776},{"_id":"themes/hexo-theme-yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1481603470777},{"_id":"themes/hexo-theme-yilia/source-src/js/fix.js","hash":"1aa4843ea651ebd77de89052b5535bade542bb13","modified":1481603470777},{"_id":"themes/hexo-theme-yilia/source-src/js/main.js","hash":"c16968e4607461741a7c63847af686de07f85208","modified":1481603470778},{"_id":"themes/hexo-theme-yilia/source-src/js/mobile.js","hash":"be13e3edaae77232503139e4f0272fb439511e3f","modified":1481603470779},{"_id":"themes/hexo-theme-yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1481603470780},{"_id":"themes/hexo-theme-yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1481603470780},{"_id":"themes/hexo-theme-yilia/source-src/js/slider.js","hash":"f5f8c9a6dad9e3e93f63813a623ec388727565f5","modified":1481603470781},{"_id":"themes/hexo-theme-yilia/source-src/js/util.js","hash":"79da46bd2a1b7ef49bfafa2e4fb8b92845f7e77e","modified":1481603470782},{"_id":"themes/hexo-theme-yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1481603470782},{"_id":"themes/hexo-theme-yilia/.git/objects/17/98f17343001746def11e0a15de01faed450e7f","hash":"2f9d8056625f4bef11f113b7985ddebd3270232f","modified":1481611195484},{"_id":"themes/hexo-theme-yilia/.git/objects/19/ecec007eaa6f82f0b94991fee01b1157dcd832","hash":"cf2af1ce126e389233754dad08403a625a7daaa2","modified":1481611195482},{"_id":"themes/hexo-theme-yilia/.git/objects/1a/23692a13bb1c2a1e6801988186898b7bacb2d7","hash":"eddcd8183ea1311126eda7ae833f824d505861a6","modified":1481608676106},{"_id":"themes/hexo-theme-yilia/.git/objects/1e/92e18fa35ee1313966b6928510b856290a06fd","hash":"2561757e86cb5c6b6158b3f592340478b40dd73e","modified":1481618752183},{"_id":"themes/hexo-theme-yilia/.git/objects/55/7c9adbf560a1453c2102bb778dc6c19ed6bd23","hash":"497730114478583152e1671fa725d9a81513891c","modified":1481608638592},{"_id":"themes/hexo-theme-yilia/.git/objects/69/a2a86b6a4c13876413fc5508cbb4f9f96ec9e9","hash":"ac24745454adb5e0599918ce07c5a3d7025fe51a","modified":1481611398092},{"_id":"themes/hexo-theme-yilia/.git/objects/59/777568d10e95f9be5ab0e5d6949f45fe538d87","hash":"4a062bb508cc818e633e77c961157efca31a004b","modified":1481611195471},{"_id":"themes/hexo-theme-yilia/.git/objects/75/7c1ce05f33578f148b3c945eb0b72893f4125a","hash":"615ec16a548fbbc241740691a66ad091c8c25240","modified":1481611195475},{"_id":"themes/hexo-theme-yilia/.git/objects/7f/a927c23d537e6988ebf18a870f72aac3a757bb","hash":"891aa2be6d170ba9257f989b567dedbb93c9b7b4","modified":1481618732903},{"_id":"themes/hexo-theme-yilia/.git/objects/86/51bdac0f4b0ffe57610bc0fe69156e66069f5a","hash":"b71223327f06fefaac76265e6fbfd0e0e129b79d","modified":1481618752189},{"_id":"themes/hexo-theme-yilia/.git/objects/87/95150bf9be89c5e3f28531c387da612e84b96b","hash":"47979de2e20c81ea1b3361d75c0fab0e75957662","modified":1481609577691},{"_id":"themes/hexo-theme-yilia/.git/objects/8f/33fe85de8837f523f3a4f50703fbbbdb2baee7","hash":"f98a6b643623a3007388c3de211a8c8d4ff18470","modified":1481608676098},{"_id":"themes/hexo-theme-yilia/.git/objects/8a/d17cc3f5f899e560aa76151b8668bfeec9190f","hash":"5d8d4297f2e279421556d627a6a44e2cc5e19983","modified":1481609577697},{"_id":"themes/hexo-theme-yilia/.git/objects/92/307390577d7176ceddd6b44eea0996e28a168b","hash":"1e3b4f37f6f83ef499d704def2daa1b5e7785c7f","modified":1481611195486},{"_id":"themes/hexo-theme-yilia/.git/objects/aa/6fed4a102df3a4f1d2d2d5d8fbbc1322d5d48b","hash":"f838d5532af869923c1a18ff84f786084966f139","modified":1481611195473},{"_id":"themes/hexo-theme-yilia/.git/objects/b4/1cf8aeee3bb7f2002f54bcae643220f5bbec21","hash":"dead940328db01856db6740d22694e0ec61f9773","modified":1481611195464},{"_id":"themes/hexo-theme-yilia/.git/objects/c2/711a3ae26bb96821c9902028abae01a8f5fc0b","hash":"34859c963f0d6943886329dc56fb842a88560acd","modified":1481611195468},{"_id":"themes/hexo-theme-yilia/.git/objects/cd/a8161a13362286b1c32bc20254707a62e2c656","hash":"9dbdb3864b18474b76f6a1e80e0340706f744697","modified":1481609577694},{"_id":"themes/hexo-theme-yilia/.git/objects/da/40dea4e0efc8412660841ece79a60bd39d6d1d","hash":"ef885c9d397f700a52b0742f79774dd9c9c8f30e","modified":1481611416690},{"_id":"themes/hexo-theme-yilia/.git/objects/e7/3557a23d418a15a37051d4e351a30798296422","hash":"2183c7b7b9c3f7f482f19f15d06e92dda3237004","modified":1481611195478},{"_id":"themes/hexo-theme-yilia/.git/objects/eb/34b0f43dbc29eb1188290856f4d18a00b84be8","hash":"b6e9707e7d6a07f7f53c8831279c0fd1a1ed387a","modified":1481611416682},{"_id":"themes/hexo-theme-yilia/.git/objects/f4/49b15f8cabd9862c1a9bc4191e3be5c76b567c","hash":"4f6cadb69ee47904e904e87bbddbb72cd7e00b8f","modified":1481611195466},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-e8fd3717068d817ecd48bd443319f506b4031155.idx","hash":"71233acae71799407e1c0696203f1462733e28b4","modified":1481603470247},{"_id":"themes/hexo-theme-yilia/.git/refs/heads/master","hash":"42075134c59b6177bdaf8f7402cd8b9c78d874a7","modified":1481618752192},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/category.ejs","hash":"7f30b4c98eee09d0af1df8164d86dcad27f9acfc","modified":1481603470733},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1481603470733},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1481603470734},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1481603470734},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/tag.ejs","hash":"e6edf173da77fb851fc067a481a897ad934cc4ca","modified":1481603470736},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1481603470737},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1481603470735},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_animation.scss","hash":"955c8978496e4e861130ca1e21c5ef803ceb6136","modified":1481603470750},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1481603470750},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1481603470751},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1481603470752},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1481603470753},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.eot","hash":"a6048d19579aa03fa2e0cf6f4ea0c91cc9906946","modified":1481603470755},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.svg","hash":"7c4d7a123d44d525f322076b74100493a735d9be","modified":1481603470756},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.ttf","hash":"4eecc4e6e094525636c66a0f036d9d136eb043b4","modified":1481603470757},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.woff","hash":"3b5c92c260005b654d2cb54e3d44c7a79e5a52b9","modified":1481603470758},{"_id":"themes/hexo-theme-yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1481603470762},{"_id":"themes/hexo-theme-yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1481603470762},{"_id":"themes/hexo-theme-yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1481603470763},{"_id":"source/Image/xwz.png","hash":"33a30f68a262b11b0d8ae95ec1b7ae73d36c46d5","modified":1479896041456},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/heads/master","hash":"fa656ddee5aece999063644b7d7fe92e544f9e0c","modified":1481618752193},{"_id":"themes/hexo-theme-yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1481603470699},{"_id":"themes/hexo-theme-yilia/.git/refs/remotes/origin/master","hash":"42075134c59b6177bdaf8f7402cd8b9c78d874a7","modified":1481618774139},{"_id":"themes/hexo-theme-yilia/source/slider.js","hash":"fac265afe4f8b48a7c5a858268a808a7b0336ca6","modified":1481603470800},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/remotes/origin/HEAD","hash":"21a77976c8cfa95e87505522c9324a3088cad5e2","modified":1481603470699},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/remotes/origin/master","hash":"c6369162240f56f71df8527283186dd150013a9a","modified":1481618774142},{"_id":"themes/hexo-theme-yilia/source/main.js","hash":"d863714ce553a5ae94fb2efa9843744e7e19ed3b","modified":1481603470797},{"_id":"source/Image/zzh.jpg","hash":"7e622742d73f02ee094cd3ff9956de0df292566d","modified":1480428398559},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-e8fd3717068d817ecd48bd443319f506b4031155.pack","hash":"f98100a5c0a1bd155e05ca0c071ffdd3a32ce9b5","modified":1481603470251},{"_id":"public/content.json","hash":"c4b7169bd90a4797ce0332b1f66de7474d12c4ca","modified":1481717442153},{"_id":"public/怀抱冥顽的热忱看草木渐深/index.html","hash":"75532f24949335f99cbab4f6fa3492fee0adaea3","modified":1481717442261},{"_id":"public/2016/12/01/zyt/index.html","hash":"5d2449aed0a00a9645156a56c98b7d99c1e64565","modified":1481717442281},{"_id":"public/2016/11/29/林宥嘉：他説好：）/index.html","hash":"296feac66e99f7fd0f24800bc0aa08f89ca9390f","modified":1481717442281},{"_id":"public/archives/index.html","hash":"2d6bcf13d1443f975c7f59ca75b1301f22f8be11","modified":1481717442281},{"_id":"public/archives/2016/index.html","hash":"037c500261a0c6ce4c45a6002b751236e1d1221b","modified":1481717442281},{"_id":"public/archives/2016/11/index.html","hash":"c12178a9fe6cbb90cc1c03bd60615a931aef1702","modified":1481717442281},{"_id":"public/archives/2016/12/index.html","hash":"4dbd3287e2731bc194a976e0e4d3f1a6cf6b5bf4","modified":1481717442281},{"_id":"public/tags/python/index.html","hash":"e304e43ddee9af62135e844c1f4405f8351775c7","modified":1481717442281},{"_id":"public/tags/反人类/index.html","hash":"0d84b2928b46a5819377c3d8043bdce681176a3a","modified":1481717442281},{"_id":"public/tags/音乐/index.html","hash":"e14d0ff82e479e51f7ffd36045557f108ad59b85","modified":1481717442281},{"_id":"public/tags/Leo/index.html","hash":"cfd55197d2c805b57776a9a641690c4850bf3885","modified":1481717442281},{"_id":"public/2016/12/01/python_1/index.html","hash":"bdf5577bc686a3dd817a35d13da32b38c1ada663","modified":1481717442281},{"_id":"public/index.html","hash":"4112f2199791219d363baa5364ee09fbffc92729","modified":1481717442281},{"_id":"public/2016/12/14/python_yield1/index.html","hash":"7cef80c6603cdada1892b46703f69c6f09462404","modified":1481717442293},{"_id":"public/CNAME","hash":"205d328c080d6176ae2a52a7083dd307ca757d09","modified":1481717442301},{"_id":"public/Image/hei1.jpeg","hash":"8f7e9c8006988df83629b9c29bc143ab379f8e05","modified":1481717442301},{"_id":"public/Image/hei2.jpeg","hash":"f9d8a150a7a740cdd96745acb370bc9e8576eb75","modified":1481717442301},{"_id":"public/Image/hei3.jpg","hash":"3394e7cc81a8073d00e2e13d5f437dc81f7816af","modified":1481717442301},{"_id":"public/Image/zzh.webp","hash":"8afcebaa305001225768a037e8634ddd8852f337","modified":1481717442301},{"_id":"public/Image/wxpay.png","hash":"d92c865cac8cb0ff9c13990aa88c5c91ea5bf6e5","modified":1481717442301},{"_id":"public/fonts/iconfont.eot","hash":"a6048d19579aa03fa2e0cf6f4ea0c91cc9906946","modified":1481717442301},{"_id":"public/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1481717442301},{"_id":"public/fonts/iconfont.svg","hash":"7c4d7a123d44d525f322076b74100493a735d9be","modified":1481717442301},{"_id":"public/fonts/iconfont.woff","hash":"3b5c92c260005b654d2cb54e3d44c7a79e5a52b9","modified":1481717442301},{"_id":"public/fonts/iconfont.ttf","hash":"4eecc4e6e094525636c66a0f036d9d136eb043b4","modified":1481717442301},{"_id":"public/fonts/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1481717442301},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1481717442301},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1481717442301},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1481717442301},{"_id":"public/2016/12/01/python_1/hei1.jpeg","hash":"8f7e9c8006988df83629b9c29bc143ab379f8e05","modified":1481717442301},{"_id":"public/2016/12/01/python_1/hei2.jpeg","hash":"f9d8a150a7a740cdd96745acb370bc9e8576eb75","modified":1481717442301},{"_id":"public/Image/alipay.png","hash":"e56082101433ea0d328a2aba5910622c0a7a030d","modified":1481717442313},{"_id":"public/Image/zzh-min.jpg","hash":"1065f6aa85fd04a7d38dccdadb5551860a449a4f","modified":1481717442317},{"_id":"public/main.css","hash":"978d85fb60d7b3fd3e1af41c84bdfcc8255ae0d0","modified":1481717442333},{"_id":"public/slider.js","hash":"a857e5aaefdac2ac214cb4b549d0743657ab4fba","modified":1481717442333},{"_id":"public/main.js","hash":"0924738d804a287c4566638828391f828c4eb9e3","modified":1481717442333},{"_id":"public/Image/xwz.png","hash":"33a30f68a262b11b0d8ae95ec1b7ae73d36c46d5","modified":1481717442365},{"_id":"public/Image/zzh.jpg","hash":"7e622742d73f02ee094cd3ff9956de0df292566d","modified":1481717442373}],"Category":[],"Data":[],"Page":[{"title":"怀抱冥顽的热忱看草木渐深","date":"2016-11-29T03:18:48.000Z","_content":"> 怀抱冥顽的热忱看草木渐深","source":"怀抱冥顽的热忱看草木渐深/index.md","raw":"---\ntitle: 怀抱冥顽的热忱看草木渐深\ndate: 2016-11-29 11:18:48\n---\n> 怀抱冥顽的热忱看草木渐深","updated":"2016-11-29T03:25:54.951Z","path":"怀抱冥顽的热忱看草木渐深/index.html","comments":1,"layout":"page","_id":"ciwowb3500001mgndlm9adi3a","content":"<blockquote>\n<p>怀抱冥顽的热忱看草木渐深</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>怀抱冥顽的热忱看草木渐深</p>\n</blockquote>\n"}],"Post":[{"title":"你需要一个老头，帮助你理解下 Python 中的 yield","date":"2016-12-14T08:01:01.000Z","layout":"post","comments":1,"reward":true,"_content":"\n> **题外话**\n> * 最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 `yield` 这里看过去了，知道这个东西是用来造一个`生成器`用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。\n> * 我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。\n> * <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n----------\n\n### 说起 `yield`，那这到底是个什么玩意？\n\n准备好了，我要开始背课文了：\n……\n<!--more-->\n从小脑袋不好使，记不住……\n还是编故事吧：\n\n有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：\n> 有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）\n\n提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）\n\n不行，我也要凑热闹。（koujiao……）\n\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print b\n        a, b = b, a + b\n        n = n + 1\n```\n好，跑一下试试。\n```python\n>>> fab(5)\n1\n1\n2\n3\n5\n```\n结果是对的，你以为这就完了？\n隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接`print`出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）\n好，那就听您老的，给你返回一个 List 让你用（？？？）。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    list = []\n    while n < max:\n        list.append(b)\n        a, b = b, a + b\n        n = n + 1\n    return list\n```\n来，试一下。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。\n\n### 性能优化\n\n如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西`xrange`。\n```python\n# 1\nfor i in range(1000): \n    pass\n\n# 2\nfor i in xrange(1000):\n    pass\n```\n上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）\n\n好，实现一个。\n```python\nclass Fab(object):\n    \n    def __init__(self, max):\n        self.max = max\n        self.n, self.a, self.b = 0, 0, 1\n        \n    def __iter__(self):\n        return self\n        \n    def next(self):\n        if self.n < self.max:\n            r = self.b\n            self.a, self.b = self.b, self.a + self.b\n            self.n = self.n + 1\n            return r\n        raise StopIteration()\n```\n基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。\n我们来调用一下：\n```python\n>>> for n in Fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。\n\n很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。\n\n来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        # print b\n        a, b = b, a + b\n        n = n + 1\n```\n跟最初的第一个版本很像，注释掉了`print b`这句话，加上了 `yield b`。这里我们先调用下，看看结果。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n### 吹牛B模式已开启\nok, 现在来回想下我们一路走过来，从最初的版本到使用`yield`之前，经历了哪些改动？\n仔细对照第一次的例子和这个使用`yield`的例子，好像差不多？再看看我们测试结果的代码有什么不同。\n就是这里了\n```python\n# 第一个例子\nfab(5)\n\n# yield例子\nfor n in fab(5)\n    print n\n```\n发现问题了吗？\n> * fab(max) 函数中同样使用循环\n> * 一个使用 yield，另一个使用 print 打印\n> * yield 例子，需要自己循环调用才能一个一个打印出来\n\n这里我们推测`yield`使用上的特点：\n> * 暂停函数运行（要循环调用才管用）\n> * 再次调用能从上次暂停的地方继续执行函数（数列是连续的）\n> * 函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续\n> * 对不起我编不下去了\n\n据说还有更强大的使用方式，下次有机会研究研究写个续吧：）\n\n----------\n**隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。**\n\n例子取自：[廖雪峰-Python yield使用浅析](http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000)","source":"_posts/python_yield1.md","raw":"---\ntitle: 你需要一个老头，帮助你理解下 Python 中的 yield\ndate: 2016-12-14 16:01:01\nlayout: post\ncomments: true\nreward: true\ntags:\n    - python\n\n---\n\n> **题外话**\n> * 最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 `yield` 这里看过去了，知道这个东西是用来造一个`生成器`用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。\n> * 我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。\n> * <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n----------\n\n### 说起 `yield`，那这到底是个什么玩意？\n\n准备好了，我要开始背课文了：\n……\n<!--more-->\n从小脑袋不好使，记不住……\n还是编故事吧：\n\n有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：\n> 有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）\n\n提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）\n\n不行，我也要凑热闹。（koujiao……）\n\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print b\n        a, b = b, a + b\n        n = n + 1\n```\n好，跑一下试试。\n```python\n>>> fab(5)\n1\n1\n2\n3\n5\n```\n结果是对的，你以为这就完了？\n隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接`print`出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）\n好，那就听您老的，给你返回一个 List 让你用（？？？）。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    list = []\n    while n < max:\n        list.append(b)\n        a, b = b, a + b\n        n = n + 1\n    return list\n```\n来，试一下。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。\n\n### 性能优化\n\n如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西`xrange`。\n```python\n# 1\nfor i in range(1000): \n    pass\n\n# 2\nfor i in xrange(1000):\n    pass\n```\n上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）\n\n好，实现一个。\n```python\nclass Fab(object):\n    \n    def __init__(self, max):\n        self.max = max\n        self.n, self.a, self.b = 0, 0, 1\n        \n    def __iter__(self):\n        return self\n        \n    def next(self):\n        if self.n < self.max:\n            r = self.b\n            self.a, self.b = self.b, self.a + self.b\n            self.n = self.n + 1\n            return r\n        raise StopIteration()\n```\n基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。\n我们来调用一下：\n```python\n>>> for n in Fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。\n\n很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。\n\n来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        # print b\n        a, b = b, a + b\n        n = n + 1\n```\n跟最初的第一个版本很像，注释掉了`print b`这句话，加上了 `yield b`。这里我们先调用下，看看结果。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n### 吹牛B模式已开启\nok, 现在来回想下我们一路走过来，从最初的版本到使用`yield`之前，经历了哪些改动？\n仔细对照第一次的例子和这个使用`yield`的例子，好像差不多？再看看我们测试结果的代码有什么不同。\n就是这里了\n```python\n# 第一个例子\nfab(5)\n\n# yield例子\nfor n in fab(5)\n    print n\n```\n发现问题了吗？\n> * fab(max) 函数中同样使用循环\n> * 一个使用 yield，另一个使用 print 打印\n> * yield 例子，需要自己循环调用才能一个一个打印出来\n\n这里我们推测`yield`使用上的特点：\n> * 暂停函数运行（要循环调用才管用）\n> * 再次调用能从上次暂停的地方继续执行函数（数列是连续的）\n> * 函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续\n> * 对不起我编不下去了\n\n据说还有更强大的使用方式，下次有机会研究研究写个续吧：）\n\n----------\n**隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。**\n\n例子取自：[廖雪峰-Python yield使用浅析](http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000)","slug":"python_yield1","published":1,"updated":"2016-12-14T12:10:16.093Z","photos":[],"link":"","_id":"ciwowb34w0000mgndtoizkl32","content":"<blockquote>\n<p><strong>题外话</strong></p>\n<ul>\n<li>最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 <code>yield</code> 这里看过去了，知道这个东西是用来造一个<code>生成器</code>用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。</li>\n<li>我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。</li>\n<li><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"说起-yield，那这到底是个什么玩意？\"><a href=\"#说起-yield，那这到底是个什么玩意？\" class=\"headerlink\" title=\"说起 yield，那这到底是个什么玩意？\"></a>说起 <code>yield</code>，那这到底是个什么玩意？</h3><p>准备好了，我要开始背课文了：<br>……<br><a id=\"more\"></a><br>从小脑袋不好使，记不住……<br>还是编故事吧：</p>\n<p>有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：</p>\n<blockquote>\n<p>有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）</p>\n</blockquote>\n<p>提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）</p>\n<p>不行，我也要凑热闹。（koujiao……）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">print</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>好，跑一下试试。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fab(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>结果是对的，你以为这就完了？<br>隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接<code>print</code>出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）<br>好，那就听您老的，给你返回一个 List 让你用（？？？）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    list = []</div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        list.append(b)</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list</div></pre></td></tr></table></figure></p>\n<p>来，试一下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。</p>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西<code>xrange</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>): </div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1000</span>):</div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）</p>\n<p>好，实现一个。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fab</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, max)</span>:</span></div><div class=\"line\">        self.max = max</div><div class=\"line\">        self.n, self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.n &lt; self.max:</div><div class=\"line\">            r = self.b</div><div class=\"line\">            self.a, self.b = self.b, self.a + self.b</div><div class=\"line\">            self.n = self.n + <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> r</div><div class=\"line\">        <span class=\"keyword\">raise</span> StopIteration()</div></pre></td></tr></table></figure></p>\n<p>基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。<br>我们来调用一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。</p>\n<p>很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。</p>\n<p>来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        <span class=\"comment\"># print b</span></div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>跟最初的第一个版本很像，注释掉了<code>print b</code>这句话，加上了 <code>yield b</code>。这里我们先调用下，看看结果。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"吹牛B模式已开启\"><a href=\"#吹牛B模式已开启\" class=\"headerlink\" title=\"吹牛B模式已开启\"></a>吹牛B模式已开启</h3><p>ok, 现在来回想下我们一路走过来，从最初的版本到使用<code>yield</code>之前，经历了哪些改动？<br>仔细对照第一次的例子和这个使用<code>yield</code>的例子，好像差不多？再看看我们测试结果的代码有什么不同。<br>就是这里了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 第一个例子</span></div><div class=\"line\">fab(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># yield例子</span></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure></p>\n<p>发现问题了吗？</p>\n<blockquote>\n<ul>\n<li>fab(max) 函数中同样使用循环</li>\n<li>一个使用 yield，另一个使用 print 打印</li>\n<li>yield 例子，需要自己循环调用才能一个一个打印出来</li>\n</ul>\n</blockquote>\n<p>这里我们推测<code>yield</code>使用上的特点：</p>\n<blockquote>\n<ul>\n<li>暂停函数运行（要循环调用才管用）</li>\n<li>再次调用能从上次暂停的地方继续执行函数（数列是连续的）</li>\n<li>函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续</li>\n<li>对不起我编不下去了</li>\n</ul>\n</blockquote>\n<p>据说还有更强大的使用方式，下次有机会研究研究写个续吧：）</p>\n<hr>\n<p><strong>隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。</strong></p>\n<p>例子取自：<a href=\"http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000\" target=\"_blank\" rel=\"external\">廖雪峰-Python yield使用浅析</a></p>\n","excerpt":"<blockquote>\n<p><strong>题外话</strong></p>\n<ul>\n<li>最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 <code>yield</code> 这里看过去了，知道这个东西是用来造一个<code>生成器</code>用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。</li>\n<li>我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。</li>\n<li><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"说起-yield，那这到底是个什么玩意？\"><a href=\"#说起-yield，那这到底是个什么玩意？\" class=\"headerlink\" title=\"说起 yield，那这到底是个什么玩意？\"></a>说起 <code>yield</code>，那这到底是个什么玩意？</h3><p>准备好了，我要开始背课文了：<br>……<br>","more":"<br>从小脑袋不好使，记不住……<br>还是编故事吧：</p>\n<p>有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：</p>\n<blockquote>\n<p>有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）</p>\n</blockquote>\n<p>提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）</p>\n<p>不行，我也要凑热闹。（koujiao……）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">print</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>好，跑一下试试。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fab(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>结果是对的，你以为这就完了？<br>隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接<code>print</code>出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）<br>好，那就听您老的，给你返回一个 List 让你用（？？？）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    list = []</div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        list.append(b)</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list</div></pre></td></tr></table></figure></p>\n<p>来，试一下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。</p>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西<code>xrange</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>): </div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1000</span>):</div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）</p>\n<p>好，实现一个。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fab</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, max)</span>:</span></div><div class=\"line\">        self.max = max</div><div class=\"line\">        self.n, self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.n &lt; self.max:</div><div class=\"line\">            r = self.b</div><div class=\"line\">            self.a, self.b = self.b, self.a + self.b</div><div class=\"line\">            self.n = self.n + <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> r</div><div class=\"line\">        <span class=\"keyword\">raise</span> StopIteration()</div></pre></td></tr></table></figure></p>\n<p>基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。<br>我们来调用一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。</p>\n<p>很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。</p>\n<p>来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        <span class=\"comment\"># print b</span></div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>跟最初的第一个版本很像，注释掉了<code>print b</code>这句话，加上了 <code>yield b</code>。这里我们先调用下，看看结果。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"吹牛B模式已开启\"><a href=\"#吹牛B模式已开启\" class=\"headerlink\" title=\"吹牛B模式已开启\"></a>吹牛B模式已开启</h3><p>ok, 现在来回想下我们一路走过来，从最初的版本到使用<code>yield</code>之前，经历了哪些改动？<br>仔细对照第一次的例子和这个使用<code>yield</code>的例子，好像差不多？再看看我们测试结果的代码有什么不同。<br>就是这里了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 第一个例子</span></div><div class=\"line\">fab(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># yield例子</span></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure></p>\n<p>发现问题了吗？</p>\n<blockquote>\n<ul>\n<li>fab(max) 函数中同样使用循环</li>\n<li>一个使用 yield，另一个使用 print 打印</li>\n<li>yield 例子，需要自己循环调用才能一个一个打印出来</li>\n</ul>\n</blockquote>\n<p>这里我们推测<code>yield</code>使用上的特点：</p>\n<blockquote>\n<ul>\n<li>暂停函数运行（要循环调用才管用）</li>\n<li>再次调用能从上次暂停的地方继续执行函数（数列是连续的）</li>\n<li>函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续</li>\n<li>对不起我编不下去了</li>\n</ul>\n</blockquote>\n<p>据说还有更强大的使用方式，下次有机会研究研究写个续吧：）</p>\n<hr>\n<p><strong>隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。</strong></p>\n<p>例子取自：<a href=\"http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000\">廖雪峰-Python yield使用浅析</a></p>"},{"title":"记python的一个坑","date":"2016-12-01T08:55:10.000Z","layout":"post","comments":1,"reward":true,"_content":"\n之前 python 的 server 出过一次问题，总是异常丢失数据。\n查日志也分析不出问题。\n\n![heirenwenhao](/Image/hei1.jpeg)\n\n<!--more-->\n很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{'zhangsan', 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。\n\n问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。\n后来今天看到了这么一段：\n> 以下代码将输出什么?\n```python\nlist = ['a', 'b', 'c', 'd', 'e']\nprint list[10:]\n```\n> 答案\n\n> 以上代码将`输出 []`，并且不会导致一个 IndexError。\n\n![heirenwenhao](/Image/hei2.jpeg)\n\n> 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。\n\n> **一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。**\n\n这原来是面试题里的送分题……\n这就尴尬了……","source":"_posts/python_1.md","raw":"---\ntitle: 记python的一个坑\ndate: 2016-12-01 16:55:10\nlayout: post\ncomments: true\nreward: true\ntags:\n    - python\n    - 反人类\n---\n\n之前 python 的 server 出过一次问题，总是异常丢失数据。\n查日志也分析不出问题。\n\n![heirenwenhao](/Image/hei1.jpeg)\n\n<!--more-->\n很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{'zhangsan', 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。\n\n问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。\n后来今天看到了这么一段：\n> 以下代码将输出什么?\n```python\nlist = ['a', 'b', 'c', 'd', 'e']\nprint list[10:]\n```\n> 答案\n\n> 以上代码将`输出 []`，并且不会导致一个 IndexError。\n\n![heirenwenhao](/Image/hei2.jpeg)\n\n> 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。\n\n> **一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。**\n\n这原来是面试题里的送分题……\n这就尴尬了……","slug":"python_1","published":1,"updated":"2016-12-13T07:58:04.892Z","photos":[],"link":"","_id":"ciwowb3540002mgndid6zhopu","content":"<p>之前 python 的 server 出过一次问题，总是异常丢失数据。<br>查日志也分析不出问题。</p>\n<p><img src=\"/Image/hei1.jpeg\" alt=\"heirenwenhao\"></p>\n<a id=\"more\"></a>\n<p>很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{‘zhangsan’, 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。</p>\n<p>问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。<br>后来今天看到了这么一段：</p>\n<blockquote>\n<p>以下代码将输出什么?<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> list[<span class=\"number\">10</span>:]</div></pre></td></tr></table></figure></p>\n<p>答案</p>\n<p>以上代码将<code>输出 []</code>，并且不会导致一个 IndexError。</p>\n</blockquote>\n<p><img src=\"/Image/hei2.jpeg\" alt=\"heirenwenhao\"></p>\n<blockquote>\n<p>正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。</p>\n<p><strong>一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。</strong></p>\n</blockquote>\n<p>这原来是面试题里的送分题……<br>这就尴尬了……</p>\n","excerpt":"<p>之前 python 的 server 出过一次问题，总是异常丢失数据。<br>查日志也分析不出问题。</p>\n<p><img src=\"/Image/hei1.jpeg\" alt=\"heirenwenhao\"></p>","more":"<p>很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{‘zhangsan’, 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。</p>\n<p>问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。<br>后来今天看到了这么一段：</p>\n<blockquote>\n<p>以下代码将输出什么?<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> list[<span class=\"number\">10</span>:]</div></pre></td></tr></table></figure></p>\n<p>答案</p>\n<p>以上代码将<code>输出 []</code>，并且不会导致一个 IndexError。</p>\n</blockquote>\n<p><img src=\"/Image/hei2.jpeg\" alt=\"heirenwenhao\"></p>\n<blockquote>\n<p>正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。</p>\n<p><strong>一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。</strong></p>\n</blockquote>\n<p>这原来是面试题里的送分题……<br>这就尴尬了……</p>"},{"title":"分享一首歌","date":"2016-12-01T01:24:10.000Z","layout":"post","comments":1,"_content":"\n“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”\n“为什么要嚣张？”\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe>\n<!--more-->\n\n\n你也许不会再出现在我的文字里了。\n其实你也有很久都没出现在我的文字里了：）","source":"_posts/zyt.md","raw":"---\ntitle: 分享一首歌\ndate: 2016-12-01 09:24:10\nlayout: post\ncomments: true\n# reward: true\ntags:\n    - 音乐\n---\n\n“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”\n“为什么要嚣张？”\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe>\n<!--more-->\n\n\n你也许不会再出现在我的文字里了。\n其实你也有很久都没出现在我的文字里了：）","slug":"zyt","published":1,"updated":"2016-12-03T18:37:05.734Z","photos":[],"link":"","_id":"ciwowb35c0004mgndg6p4v37o","content":"<p>“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”<br>“为什么要嚣张？”</p>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe><br><a id=\"more\"></a></p>\n<p>你也许不会再出现在我的文字里了。<br>其实你也有很久都没出现在我的文字里了：）</p>\n","excerpt":"<p>“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”<br>“为什么要嚣张？”</p>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe><br>","more":"</p>\n<p>你也许不会再出现在我的文字里了。<br>其实你也有很久都没出现在我的文字里了：）</p>"},{"layout":"post","title":"林宥嘉：她説好：)","date":"2016-11-29T15:56:00.000Z","comments":1,"_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe>\n<!--more-->\n> 我不介意你慢动作\n> 我相信你正在与我相遇的路上\n> 马不停蹄\n> 所以当我拥抱整个世界的孤寂\n> 也像拥抱着你\n<br\\>\n> 我不介意你慢动作\n> 也不介意这次先「擦肩而过」\n> 某天我们总会遇到对方然后说\n> 原来\n> 是你噢\n\n　　　　　　　　　　　         -『致姗姗来迟的你』","source":"_posts/林宥嘉：他説好：）.md","raw":"---\nlayout: post\ntitle: 林宥嘉：她説好：)\ndate: 2016-11-29 23:56\ncomments: true\ntags: \n\t- Leo\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe>\n<!--more-->\n> 我不介意你慢动作\n> 我相信你正在与我相遇的路上\n> 马不停蹄\n> 所以当我拥抱整个世界的孤寂\n> 也像拥抱着你\n<br\\>\n> 我不介意你慢动作\n> 也不介意这次先「擦肩而过」\n> 某天我们总会遇到对方然后说\n> 原来\n> 是你噢\n\n　　　　　　　　　　　         -『致姗姗来迟的你』","slug":"林宥嘉：他説好：）","published":1,"updated":"2016-12-03T18:39:07.019Z","photos":[],"link":"","_id":"ciwowb35g0005mgnd3jfoy397","content":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe><br><a id=\"more\"></a></p>\n<blockquote>\n<p>我不介意你慢动作<br>我相信你正在与我相遇的路上<br>马不停蹄<br>所以当我拥抱整个世界的孤寂<br>也像拥抱着你<br><br\\><br>我不介意你慢动作<br>也不介意这次先「擦肩而过」<br>某天我们总会遇到对方然后说<br>原来<br>是你噢</br\\></p>\n</blockquote>\n<p>　　　　　　　　　　　         -『致姗姗来迟的你』</p>\n","excerpt":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe><br>","more":"</p>\n<blockquote>\n<p>我不介意你慢动作<br>我相信你正在与我相遇的路上<br>马不停蹄<br>所以当我拥抱整个世界的孤寂<br>也像拥抱着你<br><br\\><br>我不介意你慢动作<br>也不介意这次先「擦肩而过」<br>某天我们总会遇到对方然后说<br>原来<br>是你噢</p>\n</blockquote>\n<p>　　　　　　　　　　　         -『致姗姗来迟的你』</p>"}],"PostAsset":[{"_id":"source/_posts/python_1/hei1.jpeg","post":"ciwowb3540002mgndid6zhopu","slug":"hei1.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/python_1/hei2.jpeg","post":"ciwowb3540002mgndid6zhopu","slug":"hei2.jpeg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ciwowb34w0000mgndtoizkl32","tag_id":"ciwowb3580003mgnd57chqrjq","_id":"ciwowb35k0007mgnd40p2nj10"},{"post_id":"ciwowb3540002mgndid6zhopu","tag_id":"ciwowb3580003mgnd57chqrjq","_id":"ciwowb35k000amgndhfwd7mfu"},{"post_id":"ciwowb3540002mgndid6zhopu","tag_id":"ciwowb35k0008mgndqqd26jim","_id":"ciwowb35k000bmgnd7qwsg271"},{"post_id":"ciwowb35c0004mgndg6p4v37o","tag_id":"ciwowb35k0009mgndj91ajtw9","_id":"ciwowb35o000dmgndt7y3v43h"},{"post_id":"ciwowb35g0005mgnd3jfoy397","tag_id":"ciwowb35o000cmgndvq0vli4e","_id":"ciwowb35o000emgndbajj6mg1"}],"Tag":[{"name":"python","_id":"ciwowb3580003mgnd57chqrjq"},{"name":"反人类","_id":"ciwowb35k0008mgndqqd26jim"},{"name":"音乐","_id":"ciwowb35k0009mgndj91ajtw9"},{"name":"Leo","_id":"ciwowb35o000cmgndvq0vli4e"}]}}
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/Image/alone.jpg","path":"Image/alone.jpg","modified":1,"renderable":0},{"_id":"source/Image/beianshenqing.png","path":"Image/beianshenqing.png","modified":1,"renderable":0},{"_id":"source/Image/hei1.jpeg","path":"Image/hei1.jpeg","modified":1,"renderable":0},{"_id":"source/Image/hei2.jpeg","path":"Image/hei2.jpeg","modified":1,"renderable":0},{"_id":"source/Image/hei3.jpg","path":"Image/hei3.jpg","modified":1,"renderable":0},{"_id":"source/Image/python-love.png","path":"Image/python-love.png","modified":1,"renderable":0},{"_id":"source/Image/walk_away.jpg","path":"Image/walk_away.jpg","modified":1,"renderable":0},{"_id":"source/Image/wxpay.png","path":"Image/wxpay.png","modified":1,"renderable":0},{"_id":"source/Image/xiugaibaimingdan.png","path":"Image/xiugaibaimingdan.png","modified":1,"renderable":0},{"_id":"source/Image/zzh.webp","path":"Image/zzh.webp","modified":1,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/main.f6a68c.css","path":"main.f6a68c.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/mobile.40e320.js","path":"mobile.40e320.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":1,"renderable":1},{"_id":"source/Image/alipay.png","path":"Image/alipay.png","modified":1,"renderable":0},{"_id":"source/Image/zzh-min.jpg","path":"Image/zzh-min.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/main.f6a68c.js","path":"main.f6a68c.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/Image/xwz.png","path":"Image/xwz.png","modified":1,"renderable":0},{"_id":"source/Image/zzh.jpg","path":"Image/zzh.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"205d328c080d6176ae2a52a7083dd307ca757d09","modified":1496296439767},{"_id":"themes/hexo-theme-yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1496306294436},{"_id":"themes/hexo-theme-yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1496306294469},{"_id":"themes/hexo-theme-yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1496306294469},{"_id":"themes/hexo-theme-yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1496306294470},{"_id":"themes/hexo-theme-yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1496306294471},{"_id":"themes/hexo-theme-yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1496306294472},{"_id":"themes/hexo-theme-yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1496306294472},{"_id":"themes/hexo-theme-yilia/_config.yml","hash":"36b93a4051fcb2095442dea0322a7c11590dfc43","modified":1496307677234},{"_id":"themes/hexo-theme-yilia/package.json","hash":"4631f9013f0b1c5fc5d73af4c3624375bfe4d109","modified":1496306294498},{"_id":"themes/hexo-theme-yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1496306294553},{"_id":"source/Image/alone.jpg","hash":"03c7666968cbe542a257cf03e0faf5473a9fdfd0","modified":1496296439769},{"_id":"source/Image/beianshenqing.png","hash":"fed38feda22940db03244541af9756b39ba1810f","modified":1496296439771},{"_id":"source/Image/hei1.jpeg","hash":"8f7e9c8006988df83629b9c29bc143ab379f8e05","modified":1496296439772},{"_id":"source/Image/hei2.jpeg","hash":"f9d8a150a7a740cdd96745acb370bc9e8576eb75","modified":1496296439773},{"_id":"source/Image/hei3.jpg","hash":"3394e7cc81a8073d00e2e13d5f437dc81f7816af","modified":1496296439774},{"_id":"source/Image/python-love.png","hash":"98aad87fede2b847569569353f5f7aaeb70f5b24","modified":1496296439775},{"_id":"source/Image/walk_away.jpg","hash":"f110f30a2f36b945826a3de0e5c969cb010a6f45","modified":1496296439776},{"_id":"source/Image/wxpay.png","hash":"d92c865cac8cb0ff9c13990aa88c5c91ea5bf6e5","modified":1496296439777},{"_id":"source/Image/xiugaibaimingdan.png","hash":"8e10f7a7007ddfd2464021851627ebfc33d41f84","modified":1496296439778},{"_id":"source/Image/zzh.webp","hash":"8afcebaa305001225768a037e8634ddd8852f337","modified":1496296439791},{"_id":"source/_posts/UltraEdit_crack.md","hash":"7213af00cf1c0c0c4e4cb98f338446871153688f","modified":1496296439792},{"_id":"source/_posts/changyancrack.md","hash":"b216acce50f3d0420e41b08500c57c2e46939995","modified":1496296439793},{"_id":"source/_posts/crackWindows10.md","hash":"812247c0051ab822c6f391d739a3eaf94faed381","modified":1496311501367},{"_id":"source/_posts/hello-world.md_bak","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1496296439793},{"_id":"source/_posts/jitang_gudu.md","hash":"5cb20ae2995bd80b1acc402c82f8522b5199d8d6","modified":1496296439794},{"_id":"source/_posts/python_1.md","hash":"d8d91c35ff81a54398ce0cc42b5df32711270602","modified":1496296439795},{"_id":"source/_posts/python_30_tips.md","hash":"87ce370eb56e77f48fbf67969b8f1acc33ba8aff","modified":1496296439795},{"_id":"source/_posts/python_yield1.md","hash":"d85a56284ebd453a9c8eb0863b2c248c6572d10d","modified":1496296439796},{"_id":"source/_posts/sgbtLC.md","hash":"e7b3fefb619b2b971cb47235748d23d3323a34ea","modified":1496296439796},{"_id":"source/_posts/zhaoxijiucao.md","hash":"1ade0eda3a9a27ab792d92f885f11fbdc9cdedf5","modified":1496296439797},{"_id":"source/_posts/zyt.md","hash":"c19a225c8811db97207dedc295d451fe09100bff","modified":1496296439798},{"_id":"source/_posts/怀抱冥顽的热忱看草木渐深.md_bak","hash":"6e55962fdb06b02cb695319254174a22a94badf6","modified":1496296439798},{"_id":"source/_posts/林宥嘉：他説好：）.md","hash":"ae5739f62685eef5f792dc7623a874895377c556","modified":1496296439799},{"_id":"source/_posts/神经衰弱吗.md_bak","hash":"b0dce9edd6d9072e9eac4295ac015c24774fdd05","modified":1496296439799},{"_id":"source/_posts/第一篇blog.md_bak","hash":"4f4d673d0f9560852c512fdd287c56da5f43c19b","modified":1496296439800},{"_id":"source/怀抱冥顽的热忱看草木渐深/index.md","hash":"23219edf6d398519008b2cafe6d9a2f17ec69755","modified":1496296439801},{"_id":"themes/hexo-theme-yilia/.git/COMMIT_EDITMSG","hash":"ae1bcb9abcc968ce97426c1fc2a4fca925749e23","modified":1496307781527},{"_id":"themes/hexo-theme-yilia/.git/FETCH_HEAD","hash":"8898cd250afcdd747ef2dea6502fa4690d42bf38","modified":1496306294202},{"_id":"themes/hexo-theme-yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496305097291},{"_id":"themes/hexo-theme-yilia/.git/config","hash":"3d98853805e325dd9949a46f205df75344960a62","modified":1496305145147},{"_id":"themes/hexo-theme-yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1496305097280},{"_id":"themes/hexo-theme-yilia/.git/index","hash":"fc12f810f26f1eaabf92d415550e7bb9669e8d1a","modified":1496307781524},{"_id":"themes/hexo-theme-yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1496306294474},{"_id":"themes/hexo-theme-yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1496306294474},{"_id":"themes/hexo-theme-yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1496306294475},{"_id":"themes/hexo-theme-yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1496306294476},{"_id":"themes/hexo-theme-yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1496306294475},{"_id":"themes/hexo-theme-yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1496306294477},{"_id":"themes/hexo-theme-yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1496306294477},{"_id":"themes/hexo-theme-yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1496306294494},{"_id":"themes/hexo-theme-yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1496306294495},{"_id":"themes/hexo-theme-yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1496306294495},{"_id":"themes/hexo-theme-yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1496306294496},{"_id":"themes/hexo-theme-yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496306294496},{"_id":"themes/hexo-theme-yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496306294497},{"_id":"themes/hexo-theme-yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1496306294497},{"_id":"themes/hexo-theme-yilia/source/main.f6a68c.css","hash":"116e8d4922fc5c677b6a6970285f6258b20fe34d","modified":1496306294547},{"_id":"themes/hexo-theme-yilia/source/mobile.40e320.js","hash":"cddc2fb9b2df3eee0c0e9d0cb937f9e54429970d","modified":1496306294550},{"_id":"themes/hexo-theme-yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1496306294552},{"_id":"themes/hexo-theme-yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1496306294499},{"_id":"themes/hexo-theme-yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1496306294539},{"_id":"source/Image/alipay.png","hash":"e56082101433ea0d328a2aba5910622c0a7a030d","modified":1496296439768},{"_id":"source/Image/zzh-min.jpg","hash":"1065f6aa85fd04a7d38dccdadb5551860a449a4f","modified":1496296439782},{"_id":"themes/hexo-theme-yilia/source/main.f6a68c.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1496306294549},{"_id":"themes/hexo-theme-yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1496305097281},{"_id":"themes/hexo-theme-yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1496305097282},{"_id":"themes/hexo-theme-yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1496305097283},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1496305097283},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1496305097284},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1496305097285},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1496305097285},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1496305097286},{"_id":"themes/hexo-theme-yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1496305097287},{"_id":"themes/hexo-theme-yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1496305097288},{"_id":"themes/hexo-theme-yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1496305097289},{"_id":"themes/hexo-theme-yilia/.git/logs/HEAD","hash":"40f1ff1309bd54b68bf919fcd68a3bef20b759b2","modified":1496307781534},{"_id":"themes/hexo-theme-yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1496306294479},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1496306294479},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1496306294480},{"_id":"themes/hexo-theme-yilia/layout/_partial/article.ejs","hash":"8bbf5db9e4d3c1037bbeaa16f9d7ea0dc281d23c","modified":1496306294480},{"_id":"themes/hexo-theme-yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1496306294481},{"_id":"themes/hexo-theme-yilia/layout/_partial/css.ejs","hash":"fe8e368f5be6b8e0724c602380e787f88a360074","modified":1496306294482},{"_id":"themes/hexo-theme-yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1496306294483},{"_id":"themes/hexo-theme-yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1496306294483},{"_id":"themes/hexo-theme-yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1496306294484},{"_id":"themes/hexo-theme-yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1496306294484},{"_id":"themes/hexo-theme-yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1496306294485},{"_id":"themes/hexo-theme-yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1496306294486},{"_id":"themes/hexo-theme-yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1496306294486},{"_id":"themes/hexo-theme-yilia/layout/_partial/script.ejs","hash":"1c0680ad7a6750bb19effae183b58755256fe241","modified":1496306294493},{"_id":"themes/hexo-theme-yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1496306294493},{"_id":"themes/hexo-theme-yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1496306294494},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496306294541},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1496306294541},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496306294542},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.9abe9f.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1496306294543},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496306294544},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496306294544},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1496306294545},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1496306294546},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496306294546},{"_id":"themes/hexo-theme-yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1496306294500},{"_id":"themes/hexo-theme-yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1496306294500},{"_id":"themes/hexo-theme-yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1496306294501},{"_id":"themes/hexo-theme-yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1496306294502},{"_id":"themes/hexo-theme-yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1496306294503},{"_id":"themes/hexo-theme-yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1496306294504},{"_id":"themes/hexo-theme-yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1496306294504},{"_id":"themes/hexo-theme-yilia/source-src/css/comment.scss","hash":"2d1c70bb606c0d87e4f68ec2e600e08b27f32b99","modified":1496306294505},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts.scss","hash":"768e77b775923c53f974a15fe9ab04d0e05198a5","modified":1496306294509},{"_id":"themes/hexo-theme-yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1496306294513},{"_id":"themes/hexo-theme-yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1496306294514},{"_id":"themes/hexo-theme-yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1496306294514},{"_id":"themes/hexo-theme-yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1496306294515},{"_id":"themes/hexo-theme-yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1496306294519},{"_id":"themes/hexo-theme-yilia/source-src/css/main.scss","hash":"1bc3240d693f190f86bf5e258cc5846e09be9ec1","modified":1496306294520},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1496306294520},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile.scss","hash":"7c24ea86d95c86b82337177559d78ce56d8912e0","modified":1496306294521},{"_id":"themes/hexo-theme-yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1496306294522},{"_id":"themes/hexo-theme-yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1496306294522},{"_id":"themes/hexo-theme-yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1496306294523},{"_id":"themes/hexo-theme-yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1496306294523},{"_id":"themes/hexo-theme-yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1496306294525},{"_id":"themes/hexo-theme-yilia/source-src/css/social.scss","hash":"7c4c54bcc4cd0bd69162745ae2a2357dcc54f5cd","modified":1496306294524},{"_id":"themes/hexo-theme-yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1496306294525},{"_id":"themes/hexo-theme-yilia/source-src/css/tools.scss","hash":"6932c642bf8191768d7090982a91c8c1f1c4ed1e","modified":1496306294526},{"_id":"themes/hexo-theme-yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1496306294526},{"_id":"themes/hexo-theme-yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1496306294528},{"_id":"themes/hexo-theme-yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1496306294529},{"_id":"themes/hexo-theme-yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1496306294530},{"_id":"themes/hexo-theme-yilia/source-src/js/fix.js","hash":"0b434b658abad220459b1e3ee962ebfa4f8f88ca","modified":1496306294531},{"_id":"themes/hexo-theme-yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1496306294532},{"_id":"themes/hexo-theme-yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1496306294533},{"_id":"themes/hexo-theme-yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1496306294534},{"_id":"themes/hexo-theme-yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1496306294535},{"_id":"themes/hexo-theme-yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1496306294537},{"_id":"themes/hexo-theme-yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1496306294538},{"_id":"themes/hexo-theme-yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1496306294539},{"_id":"themes/hexo-theme-yilia/.git/objects/2b/d951f6133f4c90bbc6d88e7c35ae1076305e8f","hash":"72412846dd2051d81ed604924475b82a0ecf40c8","modified":1496307759826},{"_id":"themes/hexo-theme-yilia/.git/objects/35/b3c56d5b2a614569fb38abb0013f95291f530c","hash":"073c537e08625290a87c74f0a3243a4842c7496e","modified":1496307781522},{"_id":"themes/hexo-theme-yilia/.git/objects/6f/9e53b7d0ff432a91b5acd9c57ab732f9200584","hash":"d96cc8934d914eee43daa8957341d4f0bb18f42a","modified":1496307781529},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-64fb06bb6d6ca44c034f5ba5c67f15b5eee9f2ed.idx","hash":"305d06747204608325c64eaf33743c7e919ada16","modified":1496306158958},{"_id":"themes/hexo-theme-yilia/.git/refs/heads/master","hash":"e19e59ea0fbe561cfcc780ac0a4735b40f2b30b7","modified":1496307781533},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/changyan.ejs","hash":"0a3c55e2660a5c4c83a161fae21a4c0b7e6e5f72","modified":1496306294488},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1496306294487},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1496306294489},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1496306294489},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1496306294490},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1496306294490},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1496306294491},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1496306294491},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/wangyiyun.ejs","hash":"5314c5616863a825c78f12ceb454ee1ac14fc6ab","modified":1496306294492},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1496306294506},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1496306294506},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1496306294507},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1496306294508},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1496306294509},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496306294510},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1496306294511},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496306294512},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496306294513},{"_id":"themes/hexo-theme-yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1496306294516},{"_id":"themes/hexo-theme-yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496306294517},{"_id":"themes/hexo-theme-yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496306294518},{"_id":"source/Image/xwz.png","hash":"33a30f68a262b11b0d8ae95ec1b7ae73d36c46d5","modified":1496296439780},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/heads/master","hash":"40f1ff1309bd54b68bf919fcd68a3bef20b759b2","modified":1496307781534},{"_id":"themes/hexo-theme-yilia/.git/refs/remotes/origin/master","hash":"e19e59ea0fbe561cfcc780ac0a4735b40f2b30b7","modified":1496307797515},{"_id":"themes/hexo-theme-yilia/.git/refs/remotes/origin/myself","hash":"d9893970a3f49fee45d449931381c471db51e5ec","modified":1496306159316},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/remotes/origin/master","hash":"79238cb6f1c9444c18f3c56f86646d8448567875","modified":1496307797517},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/remotes/origin/myself","hash":"9ecf0160d44e2caaec97bb2083a44a4672ad8ec0","modified":1496306159317},{"_id":"source/Image/zzh.jpg","hash":"7e622742d73f02ee094cd3ff9956de0df292566d","modified":1496296439790},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-64fb06bb6d6ca44c034f5ba5c67f15b5eee9f2ed.pack","hash":"26c61c60cde42243c171f4b372a3d404af114665","modified":1496306158962}],"Category":[],"Data":[],"Page":[{"title":"怀抱冥顽的热忱看草木渐深","date":"2016-11-29T03:18:48.000Z","_content":"> 怀抱冥顽的热忱看草木渐深","source":"怀抱冥顽的热忱看草木渐深/index.md","raw":"---\ntitle: 怀抱冥顽的热忱看草木渐深\ndate: 2016-11-29 11:18:48\n---\n> 怀抱冥顽的热忱看草木渐深","updated":"2017-06-01T05:53:59.801Z","path":"怀抱冥顽的热忱看草木渐深/index.html","comments":1,"layout":"page","_id":"cj3e9p4v90001hgtzp7iovqjs","content":"<blockquote>\n<p>怀抱冥顽的热忱看草木渐深</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>怀抱冥顽的热忱看草木渐深</p>\n</blockquote>\n"}],"Post":[{"title":"UltraEdit、UltraCompare 等IDM产品注册机","date":"2017-02-10T10:20:07.000Z","layout":"post","comments":1,"reward":true,"_content":"\n注册机：IDM All Products KeyGen v3.6\n使用时间：2017-2-10 \n注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50\n\n<!--more-->\n\n**注册过程**\n\n官网或者百度软件中心下载最新版本的UltraEdit ->\n\n重新打开软件 -> \n\n断网（随便输入用户）激活 -> \n\n在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -> \n\n把生成代码粘贴至软件相应输入框中 -> \n\n提交\n\n\n\n|下载方式|下载地址|备注|\n|:--------:|:--------:|:--------:|\n|翻墙党|[IDM All Products KeyGen v3.6](http://www.filehosting.org/file/details/640587/IDM%20All%20Products%20KeyGen%20v3.6.zip)|(填写邮箱，提交请求后会把下载链接发到你的邮箱中。)|\n|墙内党-百度云|[IDM All Products KeyGen v3.6](http://pan.baidu.com/s/1cpbi2a)|(提取码：2sas)|","source":"_posts/UltraEdit_crack.md","raw":"---\ntitle: UltraEdit、UltraCompare 等IDM产品注册机\ndate: 2017-2-10 18:20:07\nlayout: post\ncomments: true\nreward: true\ntags:\n    - 工具\n---\n\n注册机：IDM All Products KeyGen v3.6\n使用时间：2017-2-10 \n注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50\n\n<!--more-->\n\n**注册过程**\n\n官网或者百度软件中心下载最新版本的UltraEdit ->\n\n重新打开软件 -> \n\n断网（随便输入用户）激活 -> \n\n在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -> \n\n把生成代码粘贴至软件相应输入框中 -> \n\n提交\n\n\n\n|下载方式|下载地址|备注|\n|:--------:|:--------:|:--------:|\n|翻墙党|[IDM All Products KeyGen v3.6](http://www.filehosting.org/file/details/640587/IDM%20All%20Products%20KeyGen%20v3.6.zip)|(填写邮箱，提交请求后会把下载链接发到你的邮箱中。)|\n|墙内党-百度云|[IDM All Products KeyGen v3.6](http://pan.baidu.com/s/1cpbi2a)|(提取码：2sas)|","slug":"UltraEdit_crack","published":1,"updated":"2017-06-01T05:53:59.792Z","photos":[],"link":"","_id":"cj3e9p4v50000hgtz35bxma9n","content":"<p>注册机：IDM All Products KeyGen v3.6<br>使用时间：2017-2-10<br>注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50</p>\n<a id=\"more\"></a>\n<p><strong>注册过程</strong></p>\n<p>官网或者百度软件中心下载最新版本的UltraEdit -&gt;</p>\n<p>重新打开软件 -&gt; </p>\n<p>断网（随便输入用户）激活 -&gt; </p>\n<p>在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -&gt; </p>\n<p>把生成代码粘贴至软件相应输入框中 -&gt; </p>\n<p>提交</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下载方式</th>\n<th style=\"text-align:center\">下载地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">翻墙党</td>\n<td style=\"text-align:center\"><a href=\"http://www.filehosting.org/file/details/640587/IDM%20All%20Products%20KeyGen%20v3.6.zip\" target=\"_blank\" rel=\"external\">IDM All Products KeyGen v3.6</a></td>\n<td style=\"text-align:center\">(填写邮箱，提交请求后会把下载链接发到你的邮箱中。)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">墙内党-百度云</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1cpbi2a\" target=\"_blank\" rel=\"external\">IDM All Products KeyGen v3.6</a></td>\n<td style=\"text-align:center\">(提取码：2sas)</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>注册机：IDM All Products KeyGen v3.6<br>使用时间：2017-2-10<br>注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50</p>","more":"<p><strong>注册过程</strong></p>\n<p>官网或者百度软件中心下载最新版本的UltraEdit -&gt;</p>\n<p>重新打开软件 -&gt; </p>\n<p>断网（随便输入用户）激活 -&gt; </p>\n<p>在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -&gt; </p>\n<p>把生成代码粘贴至软件相应输入框中 -&gt; </p>\n<p>提交</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下载方式</th>\n<th style=\"text-align:center\">下载地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">翻墙党</td>\n<td style=\"text-align:center\"><a href=\"http://www.filehosting.org/file/details/640587/IDM%20All%20Products%20KeyGen%20v3.6.zip\">IDM All Products KeyGen v3.6</a></td>\n<td style=\"text-align:center\">(填写邮箱，提交请求后会把下载链接发到你的邮箱中。)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">墙内党-百度云</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1cpbi2a\">IDM All Products KeyGen v3.6</a></td>\n<td style=\"text-align:center\">(提取码：2sas)</td>\n</tr>\n</tbody>\n</table>"},{"title":"国内无备案网站使用畅言评论系统","date":"2017-05-12T23:50:28.000Z","layout":"post","comments":1,"reward":true,"_content":"\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=5133273&auto=0&height=66\"></iframe>\n\n> 本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。\n早上五点恢复意识，磨蹭到7点才打开电脑。\n\n<!--more-->\n\n# 背景\n\n畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。  \n类似的评论系统常用的有：多说、网易云跟帖、友言等。  \n多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。  \n多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 \n\n适合人群：\n* github建站未购买私人域名无法备案\n* 已拥有国内域名但因种种原因没有备案\n\n# 原理\n\n利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。  \n是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。\n\n\n# 细节\n\n### 正常注册畅言用户\n\n这一步跳过了，确实没什么可说的\n\n### 提交申请\n\n![beianshenqing](/Image/beianshenqing.png)\n\n因为我已经审核通过，所以上面显示已通过，不用纠结这一点。  \n关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。  \n不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。  \n建议去使用一些其他站点的备案信息。  \n备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~\n然后提交审核，耐心等待审核通过。  \n\n### 修改域名白名单\n\n![xiugaibaimingdan](/Image/xiugaibaimingdan.png)\n\n审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。  \n收到通知后，你的就可以开心的使用畅言了~\n\n### 已知小问题\n\n无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~","source":"_posts/changyancrack.md","raw":"---\ntitle: 国内无备案网站使用畅言评论系统\ndate: 2017-5-13 07:50:28\nlayout: post\ncomments: true\nreward: true\ntags:\n    - 工具\n    - 音乐\n---\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=5133273&auto=0&height=66\"></iframe>\n\n> 本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。\n早上五点恢复意识，磨蹭到7点才打开电脑。\n\n<!--more-->\n\n# 背景\n\n畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。  \n类似的评论系统常用的有：多说、网易云跟帖、友言等。  \n多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。  \n多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 \n\n适合人群：\n* github建站未购买私人域名无法备案\n* 已拥有国内域名但因种种原因没有备案\n\n# 原理\n\n利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。  \n是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。\n\n\n# 细节\n\n### 正常注册畅言用户\n\n这一步跳过了，确实没什么可说的\n\n### 提交申请\n\n![beianshenqing](/Image/beianshenqing.png)\n\n因为我已经审核通过，所以上面显示已通过，不用纠结这一点。  \n关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。  \n不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。  \n建议去使用一些其他站点的备案信息。  \n备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~\n然后提交审核，耐心等待审核通过。  \n\n### 修改域名白名单\n\n![xiugaibaimingdan](/Image/xiugaibaimingdan.png)\n\n审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。  \n收到通知后，你的就可以开心的使用畅言了~\n\n### 已知小问题\n\n无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~","slug":"changyancrack","published":1,"updated":"2017-06-01T05:53:59.793Z","photos":[],"link":"","_id":"cj3e9p4va0002hgtz76yt24qf","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=5133273&auto=0&height=66\"></iframe>\n\n<blockquote>\n<p>本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。<br>早上五点恢复意识，磨蹭到7点才打开电脑。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。<br>类似的评论系统常用的有：多说、网易云跟帖、友言等。<br>多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。<br>多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 </p>\n<p>适合人群：</p>\n<ul>\n<li>github建站未购买私人域名无法备案</li>\n<li>已拥有国内域名但因种种原因没有备案</li>\n</ul>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。<br>是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。</p>\n<h1 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h1><h3 id=\"正常注册畅言用户\"><a href=\"#正常注册畅言用户\" class=\"headerlink\" title=\"正常注册畅言用户\"></a>正常注册畅言用户</h3><p>这一步跳过了，确实没什么可说的</p>\n<h3 id=\"提交申请\"><a href=\"#提交申请\" class=\"headerlink\" title=\"提交申请\"></a>提交申请</h3><p><img src=\"/Image/beianshenqing.png\" alt=\"beianshenqing\"></p>\n<p>因为我已经审核通过，所以上面显示已通过，不用纠结这一点。<br>关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。<br>不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。<br>建议去使用一些其他站点的备案信息。<br>备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~<br>然后提交审核，耐心等待审核通过。  </p>\n<h3 id=\"修改域名白名单\"><a href=\"#修改域名白名单\" class=\"headerlink\" title=\"修改域名白名单\"></a>修改域名白名单</h3><p><img src=\"/Image/xiugaibaimingdan.png\" alt=\"xiugaibaimingdan\"></p>\n<p>审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。<br>收到通知后，你的就可以开心的使用畅言了~</p>\n<h3 id=\"已知小问题\"><a href=\"#已知小问题\" class=\"headerlink\" title=\"已知小问题\"></a>已知小问题</h3><p>无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~</p>\n","excerpt":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=5133273&auto=0&height=66\"></iframe>\n\n<blockquote>\n<p>本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。<br>早上五点恢复意识，磨蹭到7点才打开电脑。</p>\n</blockquote>","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。<br>类似的评论系统常用的有：多说、网易云跟帖、友言等。<br>多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。<br>多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 </p>\n<p>适合人群：</p>\n<ul>\n<li>github建站未购买私人域名无法备案</li>\n<li>已拥有国内域名但因种种原因没有备案</li>\n</ul>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。<br>是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。</p>\n<h1 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h1><h3 id=\"正常注册畅言用户\"><a href=\"#正常注册畅言用户\" class=\"headerlink\" title=\"正常注册畅言用户\"></a>正常注册畅言用户</h3><p>这一步跳过了，确实没什么可说的</p>\n<h3 id=\"提交申请\"><a href=\"#提交申请\" class=\"headerlink\" title=\"提交申请\"></a>提交申请</h3><p><img src=\"/Image/beianshenqing.png\" alt=\"beianshenqing\"></p>\n<p>因为我已经审核通过，所以上面显示已通过，不用纠结这一点。<br>关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。<br>不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。<br>建议去使用一些其他站点的备案信息。<br>备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~<br>然后提交审核，耐心等待审核通过。  </p>\n<h3 id=\"修改域名白名单\"><a href=\"#修改域名白名单\" class=\"headerlink\" title=\"修改域名白名单\"></a>修改域名白名单</h3><p><img src=\"/Image/xiugaibaimingdan.png\" alt=\"xiugaibaimingdan\"></p>\n<p>审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。<br>收到通知后，你的就可以开心的使用畅言了~</p>\n<h3 id=\"已知小问题\"><a href=\"#已知小问题\" class=\"headerlink\" title=\"已知小问题\"></a>已知小问题</h3><p>无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~</p>"},{"title":"一次反人类的自我对话","date":"2017-04-12T17:19:49.000Z","layout":"post","comments":1,"--reward":true,"_content":"\n![heirenwenhao](/Image/alone.jpg)\n\n前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。  \n这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的`鸡汤`(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受`孤独`，还是很惬意。\n\n<!--more-->\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=139177&auto=0&height=66\"></iframe>\n------\n\n# 鸡汤\n### 《黑客与画家》\n没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。  \n原因吗？  \n\n**我对黑客有种特殊的感情。**  \n**会画画的女孩很迷人。**  \n\n第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……  \n至于第二点么，**会画画的女孩很迷人**。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。\n前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会……  \n\n与初恋在初中相识。  \n与X在高中相识。  \n与Y在大学相识。  \n与Z在工作后通过Internet相识。  \n\n**我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。  \n我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。**  \n\n\n《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。  是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。\n\n------\n\n# 孤独\n### 感谢那些从你生命中消失的人\n如果一定要对他们说句话，我其实想说谢谢。  \n无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。\n\n时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。  \n这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。\n\n我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”  \n**停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。**  \n\n\n### 拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\n\n举几个例子\n\n你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？  \n\n你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？  \n\n你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？  \n\n### 孤独与时间\n\n**时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。**  \n\n我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。\n这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。\n\n孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。\n那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。\n\n孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。  \n若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。\n\n**若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。**\n\n------\n\n# 做一个The One\n别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。\n\n之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。\n\n两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。\n\n这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。  \n\n若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。\n\n**试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：）**\n\n**可替代性强的你，若是被抛弃了，不必伤心，本该如此的。**\n\n------\n\n# 朋友\n\n你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。  \n你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。  \n\n若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。\n你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……  \n所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。\n\n那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。  \n对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。\n\n是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。\n\n若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。  \n\n**不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。**  \n\n------\n\n# 异性铁哥们\n\n如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？\n\n就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：）\n\n那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。  \n你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。  \n\n你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。  \n**问题来了，这样的定义，跟备胎差多少呢？**  \n**你们的感情离其中一个人终于不敢寂寞还差多远呢？**  \n**你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？**  \n**他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？**  \n**你这么无视他人的时间，是不是有点自私？**  \n**对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？**   **难道真的不是潜意识里觉得陪伴才是最长情的告白？**\n\n你说你了解你哥们，不会的，人家就是很闲。  \n**你确定他没有因为你推掉了之前安排好的时间？**  \n**而青春这个债，你最后要怎么还？**  \n\n**最后一句，对不起？谢谢？**  \n\n\n------\n\n> 你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。\n\n\n\n","source":"_posts/jitang_gudu.md","raw":"---\ntitle: 一次反人类的自我对话\ndate: 2017-4-13 01:19:49\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - Leo\n\n---\n\n![heirenwenhao](/Image/alone.jpg)\n\n前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。  \n这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的`鸡汤`(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受`孤独`，还是很惬意。\n\n<!--more-->\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=139177&auto=0&height=66\"></iframe>\n------\n\n# 鸡汤\n### 《黑客与画家》\n没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。  \n原因吗？  \n\n**我对黑客有种特殊的感情。**  \n**会画画的女孩很迷人。**  \n\n第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……  \n至于第二点么，**会画画的女孩很迷人**。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。\n前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会……  \n\n与初恋在初中相识。  \n与X在高中相识。  \n与Y在大学相识。  \n与Z在工作后通过Internet相识。  \n\n**我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。  \n我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。**  \n\n\n《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。  是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。\n\n------\n\n# 孤独\n### 感谢那些从你生命中消失的人\n如果一定要对他们说句话，我其实想说谢谢。  \n无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。\n\n时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。  \n这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。\n\n我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”  \n**停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。**  \n\n\n### 拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\n\n举几个例子\n\n你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？  \n\n你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？  \n\n你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？  \n\n### 孤独与时间\n\n**时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。**  \n\n我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。\n这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。\n\n孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。\n那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。\n\n孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。  \n若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。\n\n**若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。**\n\n------\n\n# 做一个The One\n别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。\n\n之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。\n\n两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。\n\n这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。  \n\n若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。\n\n**试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：）**\n\n**可替代性强的你，若是被抛弃了，不必伤心，本该如此的。**\n\n------\n\n# 朋友\n\n你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。  \n你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。  \n\n若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。\n你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……  \n所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。\n\n那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。  \n对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。\n\n是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。\n\n若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。  \n\n**不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。**  \n\n------\n\n# 异性铁哥们\n\n如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？\n\n就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：）\n\n那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。  \n你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。  \n\n你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。  \n**问题来了，这样的定义，跟备胎差多少呢？**  \n**你们的感情离其中一个人终于不敢寂寞还差多远呢？**  \n**你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？**  \n**他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？**  \n**你这么无视他人的时间，是不是有点自私？**  \n**对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？**   **难道真的不是潜意识里觉得陪伴才是最长情的告白？**\n\n你说你了解你哥们，不会的，人家就是很闲。  \n**你确定他没有因为你推掉了之前安排好的时间？**  \n**而青春这个债，你最后要怎么还？**  \n\n**最后一句，对不起？谢谢？**  \n\n\n------\n\n> 你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。\n\n\n\n","slug":"jitang_gudu","published":1,"updated":"2017-06-01T05:53:59.794Z","photos":[],"link":"","_id":"cj3e9p4vi0004hgtzwlu9upi7","content":"<p><img src=\"/Image/alone.jpg\" alt=\"heirenwenhao\"></p>\n<p>前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。<br>这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的<code>鸡汤</code>(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受<code>孤独</code>，还是很惬意。</p>\n<a id=\"more\"></a>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=139177&auto=0&height=66\"></iframe></h2><h1 id=\"鸡汤\"><a href=\"#鸡汤\" class=\"headerlink\" title=\"鸡汤\"></a>鸡汤</h1><h3 id=\"《黑客与画家》\"><a href=\"#《黑客与画家》\" class=\"headerlink\" title=\"《黑客与画家》\"></a>《黑客与画家》</h3><p>没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。<br>原因吗？  </p>\n<p><strong>我对黑客有种特殊的感情。</strong><br><strong>会画画的女孩很迷人。</strong>  </p>\n<p>第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……<br>至于第二点么，<strong>会画画的女孩很迷人</strong>。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。<br>前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会……  </p>\n<p>与初恋在初中相识。<br>与X在高中相识。<br>与Y在大学相识。<br>与Z在工作后通过Internet相识。  </p>\n<p><strong>我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。<br>我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。</strong>  </p>\n<p>《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。  是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。</p>\n<hr>\n<h1 id=\"孤独\"><a href=\"#孤独\" class=\"headerlink\" title=\"孤独\"></a>孤独</h1><h3 id=\"感谢那些从你生命中消失的人\"><a href=\"#感谢那些从你生命中消失的人\" class=\"headerlink\" title=\"感谢那些从你生命中消失的人\"></a>感谢那些从你生命中消失的人</h3><p>如果一定要对他们说句话，我其实想说谢谢。<br>无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。</p>\n<p>时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。<br>这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。</p>\n<p>我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”<br><strong>停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。</strong>  </p>\n<h3 id=\"拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\"><a href=\"#拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\" class=\"headerlink\" title=\"拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\"></a>拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。</h3><p>举几个例子</p>\n<p>你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？  </p>\n<p>你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？  </p>\n<p>你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？  </p>\n<h3 id=\"孤独与时间\"><a href=\"#孤独与时间\" class=\"headerlink\" title=\"孤独与时间\"></a>孤独与时间</h3><p><strong>时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。</strong>  </p>\n<p>我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。<br>这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。</p>\n<p>孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。<br>那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。</p>\n<p>孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。<br>若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。</p>\n<p><strong>若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。</strong></p>\n<hr>\n<h1 id=\"做一个The-One\"><a href=\"#做一个The-One\" class=\"headerlink\" title=\"做一个The One\"></a>做一个The One</h1><p>别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。</p>\n<p>之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。</p>\n<p>两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。</p>\n<p>这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。  </p>\n<p>若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。</p>\n<p><strong>试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：）</strong></p>\n<p><strong>可替代性强的你，若是被抛弃了，不必伤心，本该如此的。</strong></p>\n<hr>\n<h1 id=\"朋友\"><a href=\"#朋友\" class=\"headerlink\" title=\"朋友\"></a>朋友</h1><p>你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。<br>你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。  </p>\n<p>若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。<br>你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……<br>所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。</p>\n<p>那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。<br>对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。</p>\n<p>是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。</p>\n<p>若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。  </p>\n<p><strong>不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。</strong>  </p>\n<hr>\n<h1 id=\"异性铁哥们\"><a href=\"#异性铁哥们\" class=\"headerlink\" title=\"异性铁哥们\"></a>异性铁哥们</h1><p>如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？</p>\n<p>就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：）</p>\n<p>那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。<br>你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。  </p>\n<p>你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。<br><strong>问题来了，这样的定义，跟备胎差多少呢？</strong><br><strong>你们的感情离其中一个人终于不敢寂寞还差多远呢？</strong><br><strong>你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？</strong><br><strong>他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？</strong><br><strong>你这么无视他人的时间，是不是有点自私？</strong><br><strong>对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？</strong>   <strong>难道真的不是潜意识里觉得陪伴才是最长情的告白？</strong></p>\n<p>你说你了解你哥们，不会的，人家就是很闲。<br><strong>你确定他没有因为你推掉了之前安排好的时间？</strong><br><strong>而青春这个债，你最后要怎么还？</strong>  </p>\n<p><strong>最后一句，对不起？谢谢？</strong>  </p>\n<hr>\n<blockquote>\n<p>你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。</p>\n</blockquote>\n","excerpt":"<p><img src=\"/Image/alone.jpg\" alt=\"heirenwenhao\"></p>\n<p>前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。<br>这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的<code>鸡汤</code>(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受<code>孤独</code>，还是很惬意。</p>","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=139177&auto=0&height=66\"></iframe></h2><h1 id=\"鸡汤\"><a href=\"#鸡汤\" class=\"headerlink\" title=\"鸡汤\"></a>鸡汤</h1><h3 id=\"《黑客与画家》\"><a href=\"#《黑客与画家》\" class=\"headerlink\" title=\"《黑客与画家》\"></a>《黑客与画家》</h3><p>没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。<br>原因吗？  </p>\n<p><strong>我对黑客有种特殊的感情。</strong><br><strong>会画画的女孩很迷人。</strong>  </p>\n<p>第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……<br>至于第二点么，<strong>会画画的女孩很迷人</strong>。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。<br>前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会……  </p>\n<p>与初恋在初中相识。<br>与X在高中相识。<br>与Y在大学相识。<br>与Z在工作后通过Internet相识。  </p>\n<p><strong>我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。<br>我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。</strong>  </p>\n<p>《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。  是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。</p>\n<hr>\n<h1 id=\"孤独\"><a href=\"#孤独\" class=\"headerlink\" title=\"孤独\"></a>孤独</h1><h3 id=\"感谢那些从你生命中消失的人\"><a href=\"#感谢那些从你生命中消失的人\" class=\"headerlink\" title=\"感谢那些从你生命中消失的人\"></a>感谢那些从你生命中消失的人</h3><p>如果一定要对他们说句话，我其实想说谢谢。<br>无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。</p>\n<p>时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。<br>这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。</p>\n<p>我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”<br><strong>停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。</strong>  </p>\n<h3 id=\"拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\"><a href=\"#拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\" class=\"headerlink\" title=\"拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\"></a>拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。</h3><p>举几个例子</p>\n<p>你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？  </p>\n<p>你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？  </p>\n<p>你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？  </p>\n<h3 id=\"孤独与时间\"><a href=\"#孤独与时间\" class=\"headerlink\" title=\"孤独与时间\"></a>孤独与时间</h3><p><strong>时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。</strong>  </p>\n<p>我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。<br>这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。</p>\n<p>孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。<br>那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。</p>\n<p>孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。<br>若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。</p>\n<p><strong>若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。</strong></p>\n<hr>\n<h1 id=\"做一个The-One\"><a href=\"#做一个The-One\" class=\"headerlink\" title=\"做一个The One\"></a>做一个The One</h1><p>别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。</p>\n<p>之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。</p>\n<p>两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。</p>\n<p>这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。  </p>\n<p>若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。</p>\n<p><strong>试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：）</strong></p>\n<p><strong>可替代性强的你，若是被抛弃了，不必伤心，本该如此的。</strong></p>\n<hr>\n<h1 id=\"朋友\"><a href=\"#朋友\" class=\"headerlink\" title=\"朋友\"></a>朋友</h1><p>你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。<br>你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。  </p>\n<p>若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。<br>你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……<br>所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。</p>\n<p>那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。<br>对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。</p>\n<p>是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。</p>\n<p>若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。  </p>\n<p><strong>不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。</strong>  </p>\n<hr>\n<h1 id=\"异性铁哥们\"><a href=\"#异性铁哥们\" class=\"headerlink\" title=\"异性铁哥们\"></a>异性铁哥们</h1><p>如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？</p>\n<p>就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：）</p>\n<p>那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。<br>你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。  </p>\n<p>你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。<br><strong>问题来了，这样的定义，跟备胎差多少呢？</strong><br><strong>你们的感情离其中一个人终于不敢寂寞还差多远呢？</strong><br><strong>你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？</strong><br><strong>他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？</strong><br><strong>你这么无视他人的时间，是不是有点自私？</strong><br><strong>对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？</strong>   <strong>难道真的不是潜意识里觉得陪伴才是最长情的告白？</strong></p>\n<p>你说你了解你哥们，不会的，人家就是很闲。<br><strong>你确定他没有因为你推掉了之前安排好的时间？</strong><br><strong>而青春这个债，你最后要怎么还？</strong>  </p>\n<p><strong>最后一句，对不起？谢谢？</strong>  </p>\n<hr>\n<blockquote>\n<p>你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。</p>\n</blockquote>"},{"title":"Windows 及 Office 激活 —— KMS","date":"2017-06-01T09:43:35.000Z","layout":"post","comments":1,"--reward":true,"_content":"\n# 一款强大的 windows、office 激活软件  \n—KMS\n<!--more-->\n\n简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。\n\n进入软件选择KMSAuto Net -> Activation -> Activate windows (office)\n\n> 倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS……  \n\n|下载方式|下载地址|备注|\n|:--------:|:--------:|:--------:|\n|百度云|[KMS Tools](http://pan.baidu.com/s/1qXByYKk)|提取码: e86k|","source":"_posts/crackWindows10.md","raw":"---\ntitle: Windows 及 Office 激活 —— KMS\ndate: 2017-6-1 17:43:35\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - 工具\n\n---\n\n# 一款强大的 windows、office 激活软件  \n—KMS\n<!--more-->\n\n简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。\n\n进入软件选择KMSAuto Net -> Activation -> Activate windows (office)\n\n> 倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS……  \n\n|下载方式|下载地址|备注|\n|:--------:|:--------:|:--------:|\n|百度云|[KMS Tools](http://pan.baidu.com/s/1qXByYKk)|提取码: e86k|","slug":"crackWindows10","published":1,"updated":"2017-06-01T10:05:01.367Z","photos":[],"link":"","_id":"cj3e9p4vk0005hgtzc9ve9yrx","content":"<h1 id=\"一款强大的-windows、office-激活软件\"><a href=\"#一款强大的-windows、office-激活软件\" class=\"headerlink\" title=\"一款强大的 windows、office 激活软件\"></a>一款强大的 windows、office 激活软件</h1><p>—KMS<br><a id=\"more\"></a></p>\n<p>简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。</p>\n<p>进入软件选择KMSAuto Net -&gt; Activation -&gt; Activate windows (office)</p>\n<blockquote>\n<p>倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS……  </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下载方式</th>\n<th style=\"text-align:center\">下载地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">百度云</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1qXByYKk\" target=\"_blank\" rel=\"external\">KMS Tools</a></td>\n<td style=\"text-align:center\">提取码: e86k</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<h1 id=\"一款强大的-windows、office-激活软件\"><a href=\"#一款强大的-windows、office-激活软件\" class=\"headerlink\" title=\"一款强大的 windows、office 激活软件\"></a>一款强大的 windows、office 激活软件</h1><p>—KMS<br>","more":"</p>\n<p>简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。</p>\n<p>进入软件选择KMSAuto Net -&gt; Activation -&gt; Activate windows (office)</p>\n<blockquote>\n<p>倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS……  </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下载方式</th>\n<th style=\"text-align:center\">下载地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">百度云</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1qXByYKk\">KMS Tools</a></td>\n<td style=\"text-align:center\">提取码: e86k</td>\n</tr>\n</tbody>\n</table>"},{"title":"记python的一个坑","date":"2016-12-01T08:55:10.000Z","layout":"post","comments":1,"reward":true,"_content":"\n之前 python 的 server 出过一次问题，总是异常丢失数据。\n查日志也分析不出问题。\n\n![heirenwenhao](/Image/hei1.jpeg)\n\n<!--more-->\n很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{'zhangsan', 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。\n\n问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。\n后来今天看到了这么一段：\n> 以下代码将输出什么?\n```python\nlist = ['a', 'b', 'c', 'd', 'e']\nprint list[10:]\n```\n> 答案\n\n> 以上代码将`输出 []`，并且不会导致一个 IndexError。\n\n![heirenwenhao](/Image/hei2.jpeg)\n\n> 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。\n\n> **一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。**\n\n这原来是面试题里的送分题……\n这就尴尬了……","source":"_posts/python_1.md","raw":"---\ntitle: 记python的一个坑\ndate: 2016-12-01 16:55:10\nlayout: post\ncomments: true\nreward: true\ntags:\n    - python\n    - 反人类\n---\n\n之前 python 的 server 出过一次问题，总是异常丢失数据。\n查日志也分析不出问题。\n\n![heirenwenhao](/Image/hei1.jpeg)\n\n<!--more-->\n很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{'zhangsan', 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。\n\n问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。\n后来今天看到了这么一段：\n> 以下代码将输出什么?\n```python\nlist = ['a', 'b', 'c', 'd', 'e']\nprint list[10:]\n```\n> 答案\n\n> 以上代码将`输出 []`，并且不会导致一个 IndexError。\n\n![heirenwenhao](/Image/hei2.jpeg)\n\n> 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。\n\n> **一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。**\n\n这原来是面试题里的送分题……\n这就尴尬了……","slug":"python_1","published":1,"updated":"2017-06-01T05:53:59.795Z","photos":[],"link":"","_id":"cj3e9p4vn0006hgtz0nr80sgc","content":"<p>之前 python 的 server 出过一次问题，总是异常丢失数据。<br>查日志也分析不出问题。</p>\n<p><img src=\"/Image/hei1.jpeg\" alt=\"heirenwenhao\"></p>\n<a id=\"more\"></a>\n<p>很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{‘zhangsan’, 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。</p>\n<p>问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。<br>后来今天看到了这么一段：</p>\n<blockquote>\n<p>以下代码将输出什么?<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> list[<span class=\"number\">10</span>:]</div></pre></td></tr></table></figure></p>\n<p>答案</p>\n<p>以上代码将<code>输出 []</code>，并且不会导致一个 IndexError。</p>\n</blockquote>\n<p><img src=\"/Image/hei2.jpeg\" alt=\"heirenwenhao\"></p>\n<blockquote>\n<p>正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。</p>\n<p><strong>一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。</strong></p>\n</blockquote>\n<p>这原来是面试题里的送分题……<br>这就尴尬了……</p>\n","excerpt":"<p>之前 python 的 server 出过一次问题，总是异常丢失数据。<br>查日志也分析不出问题。</p>\n<p><img src=\"/Image/hei1.jpeg\" alt=\"heirenwenhao\"></p>","more":"<p>很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{‘zhangsan’, 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。</p>\n<p>问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。<br>后来今天看到了这么一段：</p>\n<blockquote>\n<p>以下代码将输出什么?<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> list[<span class=\"number\">10</span>:]</div></pre></td></tr></table></figure></p>\n<p>答案</p>\n<p>以上代码将<code>输出 []</code>，并且不会导致一个 IndexError。</p>\n</blockquote>\n<p><img src=\"/Image/hei2.jpeg\" alt=\"heirenwenhao\"></p>\n<blockquote>\n<p>正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。</p>\n<p><strong>一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。</strong></p>\n</blockquote>\n<p>这原来是面试题里的送分题……<br>这就尴尬了……</p>"},{"title":"给程序员的 30 个基本 Python 贴士与技巧","date":"2017-04-18T16:16:01.000Z","layout":"post","comments":1,"--reward":true,"_content":"如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。  \n如果你还没有使用 python，相信看完下面 python 的实现，你会觉得**编程也是一件幸福的事**：）\n\n![Python_Love](/Image/python-love.png)\n\n如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。\n\n<!--more-->\n我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？\n\n过去我们分享过 一些 [给初学者的 Python 编程贴士](http://www.techbeamers.com/top-10-python-coding-tips-for-beginners/) 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。\n\n所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。\n\n每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 [在线虚拟 Python 运行终端](http://www.techbeamers.com/best-python-interpreter-execute-python-online/)。\n\n \n\n最近我们发布的另两个必看的 Python 资源：\n\n💡 [9 种优化 Python 代码的主要方式](http://www.techbeamers.com/python-code-optimization-tips-tricks/)\n\n💡 [发现在编程时应该避免的最常见的错误](http://www.techbeamers.com/python-programming-mistakes/)\n\n\n# 给程序员的 30 个基本 Python 贴士与技巧\n\n## 贴士#1. 原地交换两个数字\n\nPython 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例：\n\n```python\nx, y = 10, 20\nprint(x, y)\n\nx, y = y, x\nprint(x, y)\n\n#1 (10, 20)\n#2 (20, 10)\n```\n赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a> 和 &lt;b>。\n\n一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。\n\n## 贴士#2. 链状比较操作符\n\n比较操作符的聚合是另一个有时很方便的技巧：\n\n```python\nn = 10\nresult = 1 < n < 20\nprint(result)\n\n# True\n\nresult = 1 > n <= 9\nprint(result)\n\n# False\n```\n \n## 贴士#3. 使用三元操作符来进行条件赋值\n\n三元操作符是 if-else 语句也就是条件操作符的一个快捷方式：\n\n```python\n[表达式为真的返回值] if [表达式] else [表达式为假的返回值]\n```\n这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。\n\n```python\nx = 10 if (y == 9) else 20\n```\n同样地，我们可以对类做这种操作：\n\n```python\nx = (classA if y == 1 else classB)(param1, param2)\n```\n\n在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。\n\n下面是另一个多个条件表达式链接起来用以计算最小值的例子：\n\n```python\ndef small(a, b, c):\n    return a if a <= b and a <= c else (b if b <= a and b <= c else c)\n\nprint(small(1, 0, 1))\nprint(small(1, 2, 2))\nprint(small(2, 2, 3))\nprint(small(5, 4, 3))\n\n#Output\n#0 #1 #2 #3\n```\n\n我们甚至可以在列表推导中使用三元运算符：\n\n```python\n[m**2 if m > 10 else m**4 for m in range(50)]\n\n#=> [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401]\n```\n\n## 贴士#4. 多行字符串\n\n基本的方式是使用源于 C 语言的反斜杠：\n\n```python\nmultiStr = \"select * from multi_row \\\nwhere row_id < 5\"\nprint(multiStr)\n\n# select * from multi_row where row_id < 5\n```\n另一个技巧是使用三引号：\n\n```python\nmultiStr = \"\"\"select * from multi_row \nwhere row_id < 5\"\"\"\nprint(multiStr)\n\n#select * from multi_row \n#where row_id < 5\n```\n \n\n上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中：\n\n```python\nmultiStr= (\"select * from multi_row \"\n            \"where row_id < 5 \"\n            \"order by age\")\nprint(multiStr)\n\n#select * from multi_row where row_id < 5 order by age\n```\n## 贴士#5. 存储列表元素到新的变量中\n\n我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】\n\n```python\ntestList = [1,2,3]\nx, y, z = testList\n\nprint(x, y, z)\n\n#-> 1 2 3\n```\n## 贴士#6. 打印引入模块的文件路径\n\n如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧：\n\n```python\nimport threading \nimport socket\n\nprint(threading)\nprint(socket)\n\n#1- <module 'threading' from '/usr/lib/python2.7/threading.py'>\n#2- <module 'socket' from '/usr/lib/python2.7/socket.py'>\n```\n\n## 贴士#7. 交互环境下的 “_” 操作符\n\n这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。\n\n```python\n>>> 2 + 1\n3\n>>> _\n3\n>>> print _\n3\n```\n“_” 是上一个执行的表达式的输出。\n\n## 贴士#8. 字典/集合推导\n\n与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子：\n\n```python\ntestDict = {i: i * i for i in xrange(10)} \ntestSet = {i * 2 for i in xrange(10)}\n\nprint(testSet)\nprint(testDict)\n\n#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])\n#{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n```\n注：两个语句中只有一个 <:> 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange> 改为 &lt;range>。\n\n## 贴士#9. 调试脚本\n\n我们可以在 &lt;pdb> 模块的帮助下在 Python 脚本中设置断点，下面是一个例子：\n\n```python\nimport pdb\npdb.set_trace()\n```\n我们可以在脚本中任何位置指定 &lt;pdb.set_trace()> 并且在那里设置一个断点，相当简便。\n\n## 贴士#10. 开启文件分享\n\nPython 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令：\n\n### # Python 2\n```python\npython -m SimpleHTTPServer\n```\n### # Python 3\n```python\npython3 -m http.server\n```\n上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。\n\n## 贴士#11. 检查 Python 中的对象\n\n我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子：\n\n```python\ntest = [1, 3, 5, 7]\nprint( dir(test) )\n\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n```\n## 贴士#12. 简化 if 语句\n\n我们可以使用下面的方式来验证多个值：\n```python\nif m in [1,3,5,7]:\n```\n而不是：\n\n```python\nif m==1 or m==3 or m==5 or m==7:\n```\n\n或者，对于 in 操作符我们也可以使用 '{1,3,5,7}' 而不是 '[1,3,5,7]'，因为 set 中取元素是 O(1) 操作。\n\n## 贴士#13. 运行时检测 Python 版本\n\n当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本：\n\n```python\nimport sys\n\n#Detect the Python version currently in use.\nif not hasattr(sys, \"hexversion\") or sys.hexversion != 50660080:\n    print(\"Sorry, you aren't running on Python 3.5n\")\n    print(\"Please upgrade to 3.5.n\")\n    sys.exit(1)\n\n#Print Python version in a readable format.\nprint(\"Current Python version: \", sys.version)\n```\n\n或者你可以使用 sys.version_info >= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。\n\n在 Python 2.7 上运行的结果：\n\n```Python\n\nPython 2.7.10 (default, Jul 14 2015, 19:46:27)\n[GCC 4.8.2] on linux\n\nSorry, you aren't running on Python 3.5\n\nPlease upgrade to 3.5.\n```\n \n在 Python 3.5 上运行的结果：\n\n```Python\n\nPython 3.5.1 (default, Dec 2015, 13:05:11)\n[GCC 4.8.2] on linux\n\nCurrent Python version:  3.5.2 (default, Aug 22 2016, 21:11:05) \n[GCC 5.3.0]\n```\n \n## 贴士#14. 组合多个字符串\n\n如果你想拼接列表中的所有记号，比如下面的例子：\n\n```python\n>>> test = ['I', 'Like', 'Python', 'automation']\n```\n现在，让我们从上面给出的列表元素新建一个字符串：\n```python\n>>> print ''.join(test)\n```\n## 贴士#15. 四种翻转字符串/列表的方式\n\n### # 翻转列表本身\n\n```python\ntestList = [1, 3, 5]\ntestList.reverse()\nprint(testList)\n\n#-> [5, 3, 1]\n```\n### # 在一个循环中翻转并迭代输出\n\n```python\nfor element in reversed([1,3,5]):\n    print(element)\n\n#1-> 5\n#2-> 3\n#3-> 1\n```\n\n### # 一行代码翻转字符串\n\n```python\n\"Test Python\"[::-1]\n```\n输出为 “nohtyP tseT”\n\n### # 使用切片翻转列表\n\n```python\n[1, 3, 5][::-1]\n```\n上面的命令将会给出输出 [5,3,1]。\n\n## #贴士#16. 玩转枚举\n\n使用枚举可以在循环中方便地找到（当前的）索引：\n\n```python \ntestlist = [10, 20, 30]\nfor i, value in enumerate(testlist):\n    print(i, ': ', value)\n\n#1-> 0 : 10\n#2-> 1 : 20\n#3-> 2 : 30\n```\n## 贴士#17. 在 Python 中使用枚举量\n\n我们可以使用下面的方式来定义枚举量：\n\n```python\nclass Shapes:\n    Circle, Square, Triangle, Quadrangle = range(4)\n\nprint(Shapes.Circle)\nprint(Shapes.Square)\nprint(Shapes.Triangle)\nprint(Shapes.Quadrangle)\n\n#1-> 0\n#2-> 1\n#3-> 2\n#4-> 3\n```\n## 贴士#18. 从方法中返回多个值\n\n并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的：\n\n```python\n# function returning multiple values.\ndef x():\n    return 1, 2, 3, 4\n\n# Calling the above function.\na, b, c, d = x()\n\nprint(a, b, c, d)\n\n#-> 1 2 3 4\n```\n\n## 贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数\n\n* 运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：\n```python\ndef test(x, y, z):\n    print(x, y, z)\n\ntestDict = {'x': 1, 'y': 2, 'z': 3} \ntestList = [10, 20, 30]\n\ntest(*testDict)\ntest(**testDict)\ntest(*testList)\n\n#1-> x y z\n#2-> 1 2 3\n#3-> 10 20 30\n```\n## 贴士#20. 使用字典来存储选择操作\n\n我们能构造一个字典来存储表达式：\n```python\nstdcalc = {\n    'sum': lambda x, y: x + y,\n    'subtract': lambda x, y: x - y\n}\n\nprint(stdcalc['sum'](9,3))\nprint(stdcalc['subtract'](9,3))\n```\n\n## 贴士#21. 一行代码计算任何数的阶乘\n\n### Python 2.x.\n\n```python\nresult = (lambda k: reduce(int.__mul__, range(1,k+1),1))(3)\nprint(result)\n\n#-> 6\n```\n### Python 3.x.\n\n```python\nimport functools\nresult = (lambda k: functools.reduce(int.__mul__, range(1,k+1),1))(3)\nprint(result)\n\n#-> 6\n```\n## 贴士#22. 找到列表中出现最频繁的数\n\n```python\ntest = [1,2,3,4,2,2,3,1,4,4,4]\nprint(max(set(test), key=test.count))\n\n#-> 4\n```\n## 贴士#23. 重置递归限制\n\nPython 限制递归次数到 1000，我们可以重置这个值：\n\n```python\nimport sys\n\nx=1001\nprint(sys.getrecursionlimit())\n\nsys.setrecursionlimit(x)\nprint(sys.getrecursionlimit())\n\n#-> 1000\n#-> 1001\n```\n请只在必要的时候采用上面的技巧。\n\n## 贴士#24. 检查一个对象的内存使用\n\n在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法：\n\n在 Python 2.7 中\n\n```python\nimport sys\nx=1\nprint(sys.getsizeof(x))\n\n#-> 24\n```\n在 Python 3.5 中\n\n```python\nimport sys\nx=1\nprint(sys.getsizeof(x))\n\n#-> 28\n```\n## 贴士#25. 使用 __slots__ 来减少内存开支\n\n你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 __slots__ 类变量来在一定程度上减少内存开支。\n\n```python\nimport sys\nclass FileSystem(object):\n\n    def __init__(self, files, folders, devices):\n        self.files = files\n        self.folders = folders\n        self.devices = devices\nprint(sys.getsizeof( FileSystem ))\n\nclass FileSystem1(object):\n\n    __slots__ = ['files', 'folders', 'devices']\n    def __init__(self, files, folders, devices):\n        self.files = files\n        self.folders = folders\n        self.devices = devices\n\nprint(sys.getsizeof( FileSystem1 ))\n\n#In Python 3.5\n#1-> 1016\n#2-> 888\n\n# 经测试 在我的 win10 python27 中跑出的结果是：\n#1-> 452\n#2-> 512\n```\n\n很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 __slots__。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。\n\n所以，这种比较方式是不那么让人信服的，使用 __slots__ 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 [python 官方文档](https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__):\n\nThe slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. \n\n也可参考廖雪峰老师的 [使用__slots__](http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200605560b1bd3c660bf494282ede59fee17e781000) \n\n\n## 贴士#26. 使用 lambda 来模仿输出方法\n\n```python\nimport sys\nlprint=lambda *args:sys.stdout.write(\" \".join(map(str,args)))\nlprint(\"python\", \"tips\",1000,1001)\n\n#-> python tips 1000 1001\n```\n\n## 贴士#27. 从两个相关的序列构建一个字典\n\n```python\nt1 = (1, 2, 3)\nt2 = (10, 20, 30)\n\nprint(dict (zip(t1,t2)))\n\n#-> {1: 10, 2: 20, 3: 30}\n```\n\n## 贴士#28. 一行代码搜索字符串的多个前后缀\n\n```python\nprint(\"http://www.google.com\".startswith((\"http://\", \"https://\")))\nprint(\"http://www.google.co.uk\".endswith((\".com\", \".co.uk\")))\n\n#1-> True\n#2-> True\n```\n\n## 贴士#29. 不使用循环构造一个列表\n\n```python\nimport itertools\ntest = [[-1, -2], [30, 40], [25, 35]]\nprint(list(itertools.chain.from_iterable(test)))\n\n#-> [-1, -2, 30, 40, 25, 35]\n```\n## 贴士#30. 在 Python 中实现一个真正的 switch-case 语句\n\n下面的代码使用一个字典来模拟构造一个 switch-case。\n\n```python\ndef xswitch(x): \n    return xswitch._system_dict.get(x, None)\n\nxswitch._system_dict = {'files': 10, 'folders': 5, 'devices': 2}\n\nprint(xswitch('default'))\nprint(xswitch('devices'))\n\n#1-> None\n#2-> 2\n```\n\n结语 – 给程序员的基本 Python 贴士与技巧\n\n我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 & 有效地完成任务，你可以在作业与项目中使用他们。\n\n听从你的回馈会使我们变得更好，所以请分享你的想法。\n\n你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】\n\n最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。\n\n坚持学习，\n\nTechBeamers.\n\n> 本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。","source":"_posts/python_30_tips.md","raw":"---\ntitle: 给程序员的 30 个基本 Python 贴士与技巧\ndate: 2017-4-19 00:16:01\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - python\n---\n如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。  \n如果你还没有使用 python，相信看完下面 python 的实现，你会觉得**编程也是一件幸福的事**：）\n\n![Python_Love](/Image/python-love.png)\n\n如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。\n\n<!--more-->\n我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？\n\n过去我们分享过 一些 [给初学者的 Python 编程贴士](http://www.techbeamers.com/top-10-python-coding-tips-for-beginners/) 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。\n\n所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。\n\n每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 [在线虚拟 Python 运行终端](http://www.techbeamers.com/best-python-interpreter-execute-python-online/)。\n\n \n\n最近我们发布的另两个必看的 Python 资源：\n\n💡 [9 种优化 Python 代码的主要方式](http://www.techbeamers.com/python-code-optimization-tips-tricks/)\n\n💡 [发现在编程时应该避免的最常见的错误](http://www.techbeamers.com/python-programming-mistakes/)\n\n\n# 给程序员的 30 个基本 Python 贴士与技巧\n\n## 贴士#1. 原地交换两个数字\n\nPython 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例：\n\n```python\nx, y = 10, 20\nprint(x, y)\n\nx, y = y, x\nprint(x, y)\n\n#1 (10, 20)\n#2 (20, 10)\n```\n赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a> 和 &lt;b>。\n\n一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。\n\n## 贴士#2. 链状比较操作符\n\n比较操作符的聚合是另一个有时很方便的技巧：\n\n```python\nn = 10\nresult = 1 < n < 20\nprint(result)\n\n# True\n\nresult = 1 > n <= 9\nprint(result)\n\n# False\n```\n \n## 贴士#3. 使用三元操作符来进行条件赋值\n\n三元操作符是 if-else 语句也就是条件操作符的一个快捷方式：\n\n```python\n[表达式为真的返回值] if [表达式] else [表达式为假的返回值]\n```\n这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。\n\n```python\nx = 10 if (y == 9) else 20\n```\n同样地，我们可以对类做这种操作：\n\n```python\nx = (classA if y == 1 else classB)(param1, param2)\n```\n\n在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。\n\n下面是另一个多个条件表达式链接起来用以计算最小值的例子：\n\n```python\ndef small(a, b, c):\n    return a if a <= b and a <= c else (b if b <= a and b <= c else c)\n\nprint(small(1, 0, 1))\nprint(small(1, 2, 2))\nprint(small(2, 2, 3))\nprint(small(5, 4, 3))\n\n#Output\n#0 #1 #2 #3\n```\n\n我们甚至可以在列表推导中使用三元运算符：\n\n```python\n[m**2 if m > 10 else m**4 for m in range(50)]\n\n#=> [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401]\n```\n\n## 贴士#4. 多行字符串\n\n基本的方式是使用源于 C 语言的反斜杠：\n\n```python\nmultiStr = \"select * from multi_row \\\nwhere row_id < 5\"\nprint(multiStr)\n\n# select * from multi_row where row_id < 5\n```\n另一个技巧是使用三引号：\n\n```python\nmultiStr = \"\"\"select * from multi_row \nwhere row_id < 5\"\"\"\nprint(multiStr)\n\n#select * from multi_row \n#where row_id < 5\n```\n \n\n上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中：\n\n```python\nmultiStr= (\"select * from multi_row \"\n            \"where row_id < 5 \"\n            \"order by age\")\nprint(multiStr)\n\n#select * from multi_row where row_id < 5 order by age\n```\n## 贴士#5. 存储列表元素到新的变量中\n\n我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】\n\n```python\ntestList = [1,2,3]\nx, y, z = testList\n\nprint(x, y, z)\n\n#-> 1 2 3\n```\n## 贴士#6. 打印引入模块的文件路径\n\n如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧：\n\n```python\nimport threading \nimport socket\n\nprint(threading)\nprint(socket)\n\n#1- <module 'threading' from '/usr/lib/python2.7/threading.py'>\n#2- <module 'socket' from '/usr/lib/python2.7/socket.py'>\n```\n\n## 贴士#7. 交互环境下的 “_” 操作符\n\n这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。\n\n```python\n>>> 2 + 1\n3\n>>> _\n3\n>>> print _\n3\n```\n“_” 是上一个执行的表达式的输出。\n\n## 贴士#8. 字典/集合推导\n\n与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子：\n\n```python\ntestDict = {i: i * i for i in xrange(10)} \ntestSet = {i * 2 for i in xrange(10)}\n\nprint(testSet)\nprint(testDict)\n\n#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])\n#{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n```\n注：两个语句中只有一个 <:> 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange> 改为 &lt;range>。\n\n## 贴士#9. 调试脚本\n\n我们可以在 &lt;pdb> 模块的帮助下在 Python 脚本中设置断点，下面是一个例子：\n\n```python\nimport pdb\npdb.set_trace()\n```\n我们可以在脚本中任何位置指定 &lt;pdb.set_trace()> 并且在那里设置一个断点，相当简便。\n\n## 贴士#10. 开启文件分享\n\nPython 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令：\n\n### # Python 2\n```python\npython -m SimpleHTTPServer\n```\n### # Python 3\n```python\npython3 -m http.server\n```\n上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。\n\n## 贴士#11. 检查 Python 中的对象\n\n我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子：\n\n```python\ntest = [1, 3, 5, 7]\nprint( dir(test) )\n\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n```\n## 贴士#12. 简化 if 语句\n\n我们可以使用下面的方式来验证多个值：\n```python\nif m in [1,3,5,7]:\n```\n而不是：\n\n```python\nif m==1 or m==3 or m==5 or m==7:\n```\n\n或者，对于 in 操作符我们也可以使用 '{1,3,5,7}' 而不是 '[1,3,5,7]'，因为 set 中取元素是 O(1) 操作。\n\n## 贴士#13. 运行时检测 Python 版本\n\n当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本：\n\n```python\nimport sys\n\n#Detect the Python version currently in use.\nif not hasattr(sys, \"hexversion\") or sys.hexversion != 50660080:\n    print(\"Sorry, you aren't running on Python 3.5n\")\n    print(\"Please upgrade to 3.5.n\")\n    sys.exit(1)\n\n#Print Python version in a readable format.\nprint(\"Current Python version: \", sys.version)\n```\n\n或者你可以使用 sys.version_info >= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。\n\n在 Python 2.7 上运行的结果：\n\n```Python\n\nPython 2.7.10 (default, Jul 14 2015, 19:46:27)\n[GCC 4.8.2] on linux\n\nSorry, you aren't running on Python 3.5\n\nPlease upgrade to 3.5.\n```\n \n在 Python 3.5 上运行的结果：\n\n```Python\n\nPython 3.5.1 (default, Dec 2015, 13:05:11)\n[GCC 4.8.2] on linux\n\nCurrent Python version:  3.5.2 (default, Aug 22 2016, 21:11:05) \n[GCC 5.3.0]\n```\n \n## 贴士#14. 组合多个字符串\n\n如果你想拼接列表中的所有记号，比如下面的例子：\n\n```python\n>>> test = ['I', 'Like', 'Python', 'automation']\n```\n现在，让我们从上面给出的列表元素新建一个字符串：\n```python\n>>> print ''.join(test)\n```\n## 贴士#15. 四种翻转字符串/列表的方式\n\n### # 翻转列表本身\n\n```python\ntestList = [1, 3, 5]\ntestList.reverse()\nprint(testList)\n\n#-> [5, 3, 1]\n```\n### # 在一个循环中翻转并迭代输出\n\n```python\nfor element in reversed([1,3,5]):\n    print(element)\n\n#1-> 5\n#2-> 3\n#3-> 1\n```\n\n### # 一行代码翻转字符串\n\n```python\n\"Test Python\"[::-1]\n```\n输出为 “nohtyP tseT”\n\n### # 使用切片翻转列表\n\n```python\n[1, 3, 5][::-1]\n```\n上面的命令将会给出输出 [5,3,1]。\n\n## #贴士#16. 玩转枚举\n\n使用枚举可以在循环中方便地找到（当前的）索引：\n\n```python \ntestlist = [10, 20, 30]\nfor i, value in enumerate(testlist):\n    print(i, ': ', value)\n\n#1-> 0 : 10\n#2-> 1 : 20\n#3-> 2 : 30\n```\n## 贴士#17. 在 Python 中使用枚举量\n\n我们可以使用下面的方式来定义枚举量：\n\n```python\nclass Shapes:\n    Circle, Square, Triangle, Quadrangle = range(4)\n\nprint(Shapes.Circle)\nprint(Shapes.Square)\nprint(Shapes.Triangle)\nprint(Shapes.Quadrangle)\n\n#1-> 0\n#2-> 1\n#3-> 2\n#4-> 3\n```\n## 贴士#18. 从方法中返回多个值\n\n并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的：\n\n```python\n# function returning multiple values.\ndef x():\n    return 1, 2, 3, 4\n\n# Calling the above function.\na, b, c, d = x()\n\nprint(a, b, c, d)\n\n#-> 1 2 3 4\n```\n\n## 贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数\n\n* 运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：\n```python\ndef test(x, y, z):\n    print(x, y, z)\n\ntestDict = {'x': 1, 'y': 2, 'z': 3} \ntestList = [10, 20, 30]\n\ntest(*testDict)\ntest(**testDict)\ntest(*testList)\n\n#1-> x y z\n#2-> 1 2 3\n#3-> 10 20 30\n```\n## 贴士#20. 使用字典来存储选择操作\n\n我们能构造一个字典来存储表达式：\n```python\nstdcalc = {\n    'sum': lambda x, y: x + y,\n    'subtract': lambda x, y: x - y\n}\n\nprint(stdcalc['sum'](9,3))\nprint(stdcalc['subtract'](9,3))\n```\n\n## 贴士#21. 一行代码计算任何数的阶乘\n\n### Python 2.x.\n\n```python\nresult = (lambda k: reduce(int.__mul__, range(1,k+1),1))(3)\nprint(result)\n\n#-> 6\n```\n### Python 3.x.\n\n```python\nimport functools\nresult = (lambda k: functools.reduce(int.__mul__, range(1,k+1),1))(3)\nprint(result)\n\n#-> 6\n```\n## 贴士#22. 找到列表中出现最频繁的数\n\n```python\ntest = [1,2,3,4,2,2,3,1,4,4,4]\nprint(max(set(test), key=test.count))\n\n#-> 4\n```\n## 贴士#23. 重置递归限制\n\nPython 限制递归次数到 1000，我们可以重置这个值：\n\n```python\nimport sys\n\nx=1001\nprint(sys.getrecursionlimit())\n\nsys.setrecursionlimit(x)\nprint(sys.getrecursionlimit())\n\n#-> 1000\n#-> 1001\n```\n请只在必要的时候采用上面的技巧。\n\n## 贴士#24. 检查一个对象的内存使用\n\n在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法：\n\n在 Python 2.7 中\n\n```python\nimport sys\nx=1\nprint(sys.getsizeof(x))\n\n#-> 24\n```\n在 Python 3.5 中\n\n```python\nimport sys\nx=1\nprint(sys.getsizeof(x))\n\n#-> 28\n```\n## 贴士#25. 使用 __slots__ 来减少内存开支\n\n你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 __slots__ 类变量来在一定程度上减少内存开支。\n\n```python\nimport sys\nclass FileSystem(object):\n\n    def __init__(self, files, folders, devices):\n        self.files = files\n        self.folders = folders\n        self.devices = devices\nprint(sys.getsizeof( FileSystem ))\n\nclass FileSystem1(object):\n\n    __slots__ = ['files', 'folders', 'devices']\n    def __init__(self, files, folders, devices):\n        self.files = files\n        self.folders = folders\n        self.devices = devices\n\nprint(sys.getsizeof( FileSystem1 ))\n\n#In Python 3.5\n#1-> 1016\n#2-> 888\n\n# 经测试 在我的 win10 python27 中跑出的结果是：\n#1-> 452\n#2-> 512\n```\n\n很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 __slots__。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。\n\n所以，这种比较方式是不那么让人信服的，使用 __slots__ 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 [python 官方文档](https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__):\n\nThe slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. \n\n也可参考廖雪峰老师的 [使用__slots__](http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200605560b1bd3c660bf494282ede59fee17e781000) \n\n\n## 贴士#26. 使用 lambda 来模仿输出方法\n\n```python\nimport sys\nlprint=lambda *args:sys.stdout.write(\" \".join(map(str,args)))\nlprint(\"python\", \"tips\",1000,1001)\n\n#-> python tips 1000 1001\n```\n\n## 贴士#27. 从两个相关的序列构建一个字典\n\n```python\nt1 = (1, 2, 3)\nt2 = (10, 20, 30)\n\nprint(dict (zip(t1,t2)))\n\n#-> {1: 10, 2: 20, 3: 30}\n```\n\n## 贴士#28. 一行代码搜索字符串的多个前后缀\n\n```python\nprint(\"http://www.google.com\".startswith((\"http://\", \"https://\")))\nprint(\"http://www.google.co.uk\".endswith((\".com\", \".co.uk\")))\n\n#1-> True\n#2-> True\n```\n\n## 贴士#29. 不使用循环构造一个列表\n\n```python\nimport itertools\ntest = [[-1, -2], [30, 40], [25, 35]]\nprint(list(itertools.chain.from_iterable(test)))\n\n#-> [-1, -2, 30, 40, 25, 35]\n```\n## 贴士#30. 在 Python 中实现一个真正的 switch-case 语句\n\n下面的代码使用一个字典来模拟构造一个 switch-case。\n\n```python\ndef xswitch(x): \n    return xswitch._system_dict.get(x, None)\n\nxswitch._system_dict = {'files': 10, 'folders': 5, 'devices': 2}\n\nprint(xswitch('default'))\nprint(xswitch('devices'))\n\n#1-> None\n#2-> 2\n```\n\n结语 – 给程序员的基本 Python 贴士与技巧\n\n我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 & 有效地完成任务，你可以在作业与项目中使用他们。\n\n听从你的回馈会使我们变得更好，所以请分享你的想法。\n\n你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】\n\n最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。\n\n坚持学习，\n\nTechBeamers.\n\n> 本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。","slug":"python_30_tips","published":1,"updated":"2017-06-01T05:53:59.795Z","photos":[],"link":"","_id":"cj3e9p4vs0009hgtzzvt979xi","content":"<p>如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。<br>如果你还没有使用 python，相信看完下面 python 的实现，你会觉得<strong>编程也是一件幸福的事</strong>：）</p>\n<p><img src=\"/Image/python-love.png\" alt=\"Python_Love\"></p>\n<p>如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。</p>\n<a id=\"more\"></a>\n<p>我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？</p>\n<p>过去我们分享过 一些 <a href=\"http://www.techbeamers.com/top-10-python-coding-tips-for-beginners/\" target=\"_blank\" rel=\"external\">给初学者的 Python 编程贴士</a> 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。</p>\n<p>所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。</p>\n<p>每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 <a href=\"http://www.techbeamers.com/best-python-interpreter-execute-python-online/\" target=\"_blank\" rel=\"external\">在线虚拟 Python 运行终端</a>。</p>\n<p>最近我们发布的另两个必看的 Python 资源：</p>\n<p>💡 <a href=\"http://www.techbeamers.com/python-code-optimization-tips-tricks/\" target=\"_blank\" rel=\"external\">9 种优化 Python 代码的主要方式</a></p>\n<p>💡 <a href=\"http://www.techbeamers.com/python-programming-mistakes/\" target=\"_blank\" rel=\"external\">发现在编程时应该避免的最常见的错误</a></p>\n<h1 id=\"给程序员的-30-个基本-Python-贴士与技巧\"><a href=\"#给程序员的-30-个基本-Python-贴士与技巧\" class=\"headerlink\" title=\"给程序员的 30 个基本 Python 贴士与技巧\"></a>给程序员的 30 个基本 Python 贴士与技巧</h1><h2 id=\"贴士-1-原地交换两个数字\"><a href=\"#贴士-1-原地交换两个数字\" class=\"headerlink\" title=\"贴士#1. 原地交换两个数字\"></a>贴士#1. 原地交换两个数字</h2><p>Python 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">x, y = <span class=\"number\">10</span>, <span class=\"number\">20</span></div><div class=\"line\">print(x, y)</div><div class=\"line\"></div><div class=\"line\">x, y = y, x</div><div class=\"line\">print(x, y)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1 (10, 20)</span></div><div class=\"line\"><span class=\"comment\">#2 (20, 10)</span></div></pre></td></tr></table></figure>\n<p>赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a&gt; 和 &lt;b&gt;。</p>\n<p>一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。</p>\n<h2 id=\"贴士-2-链状比较操作符\"><a href=\"#贴士-2-链状比较操作符\" class=\"headerlink\" title=\"贴士#2. 链状比较操作符\"></a>贴士#2. 链状比较操作符</h2><p>比较操作符的聚合是另一个有时很方便的技巧：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = <span class=\"number\">10</span></div><div class=\"line\">result = <span class=\"number\">1</span> &lt; n &lt; <span class=\"number\">20</span></div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># True</span></div><div class=\"line\"></div><div class=\"line\">result = <span class=\"number\">1</span> &gt; n &lt;= <span class=\"number\">9</span></div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># False</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-3-使用三元操作符来进行条件赋值\"><a href=\"#贴士-3-使用三元操作符来进行条件赋值\" class=\"headerlink\" title=\"贴士#3. 使用三元操作符来进行条件赋值\"></a>贴士#3. 使用三元操作符来进行条件赋值</h2><p>三元操作符是 if-else 语句也就是条件操作符的一个快捷方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[表达式为真的返回值] <span class=\"keyword\">if</span> [表达式] <span class=\"keyword\">else</span> [表达式为假的返回值]</div></pre></td></tr></table></figure>\n<p>这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = <span class=\"number\">10</span> <span class=\"keyword\">if</span> (y == <span class=\"number\">9</span>) <span class=\"keyword\">else</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure>\n<p>同样地，我们可以对类做这种操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = (classA <span class=\"keyword\">if</span> y == <span class=\"number\">1</span> <span class=\"keyword\">else</span> classB)(param1, param2)</div></pre></td></tr></table></figure>\n<p>在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。</p>\n<p>下面是另一个多个条件表达式链接起来用以计算最小值的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">small</span><span class=\"params\">(a, b, c)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"keyword\">if</span> a &lt;= b <span class=\"keyword\">and</span> a &lt;= c <span class=\"keyword\">else</span> (b <span class=\"keyword\">if</span> b &lt;= a <span class=\"keyword\">and</span> b &lt;= c <span class=\"keyword\">else</span> c)</div><div class=\"line\"></div><div class=\"line\">print(small(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">print(small(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>))</div><div class=\"line\">print(small(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</div><div class=\"line\">print(small(<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Output</span></div><div class=\"line\"><span class=\"comment\">#0 #1 #2 #3</span></div></pre></td></tr></table></figure>\n<p>我们甚至可以在列表推导中使用三元运算符：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[m**<span class=\"number\">2</span> <span class=\"keyword\">if</span> m &gt; <span class=\"number\">10</span> <span class=\"keyword\">else</span> m**<span class=\"number\">4</span> <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>)]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#=&gt; [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401]</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-4-多行字符串\"><a href=\"#贴士-4-多行字符串\" class=\"headerlink\" title=\"贴士#4. 多行字符串\"></a>贴士#4. 多行字符串</h2><p>基本的方式是使用源于 C 语言的反斜杠：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr = <span class=\"string\">\"select * from multi_row \\</span></div><div class=\"line\">where row_id &lt; 5\"</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># select * from multi_row where row_id &lt; 5</span></div></pre></td></tr></table></figure>\n<p>另一个技巧是使用三引号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr = <span class=\"string\">\"\"\"select * from multi_row </span></div><div class=\"line\">where row_id &lt; 5\"\"\"</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#select * from multi_row </span></div><div class=\"line\"><span class=\"comment\">#where row_id &lt; 5</span></div></pre></td></tr></table></figure>\n<p>上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr= (<span class=\"string\">\"select * from multi_row \"</span></div><div class=\"line\">            <span class=\"string\">\"where row_id &lt; 5 \"</span></div><div class=\"line\">            <span class=\"string\">\"order by age\"</span>)</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#select * from multi_row where row_id &lt; 5 order by age</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-5-存储列表元素到新的变量中\"><a href=\"#贴士-5-存储列表元素到新的变量中\" class=\"headerlink\" title=\"贴士#5. 存储列表元素到新的变量中\"></a>贴士#5. 存储列表元素到新的变量中</h2><p>我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">x, y, z = testList</div><div class=\"line\"></div><div class=\"line\">print(x, y, z)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1 2 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-6-打印引入模块的文件路径\"><a href=\"#贴士-6-打印引入模块的文件路径\" class=\"headerlink\" title=\"贴士#6. 打印引入模块的文件路径\"></a>贴士#6. 打印引入模块的文件路径</h2><p>如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> threading </div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"></div><div class=\"line\">print(threading)</div><div class=\"line\">print(socket)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1- &lt;module 'threading' from '/usr/lib/python2.7/threading.py'&gt;</span></div><div class=\"line\"><span class=\"comment\">#2- &lt;module 'socket' from '/usr/lib/python2.7/socket.py'&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-7-交互环境下的-“-”-操作符\"><a href=\"#贴士-7-交互环境下的-“-”-操作符\" class=\"headerlink\" title=\"贴士#7. 交互环境下的 “_” 操作符\"></a>贴士#7. 交互环境下的 “_” 操作符</h2><p>这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>_</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> _</div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>“_” 是上一个执行的表达式的输出。</p>\n<h2 id=\"贴士-8-字典-集合推导\"><a href=\"#贴士-8-字典-集合推导\" class=\"headerlink\" title=\"贴士#8. 字典/集合推导\"></a>贴士#8. 字典/集合推导</h2><p>与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">testDict = &#123;i: i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)&#125; </div><div class=\"line\">testSet = &#123;i * <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)&#125;</div><div class=\"line\"></div><div class=\"line\">print(testSet)</div><div class=\"line\">print(testDict)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])</span></div><div class=\"line\"><span class=\"comment\">#&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&#125;</span></div></pre></td></tr></table></figure>\n<p>注：两个语句中只有一个 &lt;:&gt; 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange&gt; 改为 &lt;range&gt;。</p>\n<h2 id=\"贴士-9-调试脚本\"><a href=\"#贴士-9-调试脚本\" class=\"headerlink\" title=\"贴士#9. 调试脚本\"></a>贴士#9. 调试脚本</h2><p>我们可以在 &lt;pdb&gt; 模块的帮助下在 Python 脚本中设置断点，下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\">pdb.set_trace()</div></pre></td></tr></table></figure>\n<p>我们可以在脚本中任何位置指定 &lt;pdb.set_trace()&gt; 并且在那里设置一个断点，相当简便。</p>\n<h2 id=\"贴士-10-开启文件分享\"><a href=\"#贴士-10-开启文件分享\" class=\"headerlink\" title=\"贴士#10. 开启文件分享\"></a>贴士#10. 开启文件分享</h2><p>Python 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令：</p>\n<h3 id=\"Python-2\"><a href=\"#Python-2\" class=\"headerlink\" title=\"# Python 2\"></a># Python 2</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m SimpleHTTPServer</div></pre></td></tr></table></figure>\n<h3 id=\"Python-3\"><a href=\"#Python-3\" class=\"headerlink\" title=\"# Python 3\"></a># Python 3</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python3 -m http.server</div></pre></td></tr></table></figure>\n<p>上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。</p>\n<h2 id=\"贴士-11-检查-Python-中的对象\"><a href=\"#贴士-11-检查-Python-中的对象\" class=\"headerlink\" title=\"贴士#11. 检查 Python 中的对象\"></a>贴士#11. 检查 Python 中的对象</h2><p>我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\">print( dir(test) )</div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'__add__'</span>, <span class=\"string\">'__class__'</span>, <span class=\"string\">'__contains__'</span>, <span class=\"string\">'__delattr__'</span>, <span class=\"string\">'__delitem__'</span>, <span class=\"string\">'__delslice__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__eq__'</span>, <span class=\"string\">'__format__'</span>, <span class=\"string\">'__ge__'</span>, <span class=\"string\">'__getattribute__'</span>, <span class=\"string\">'__getitem__'</span>, <span class=\"string\">'__getslice__'</span>, <span class=\"string\">'__gt__'</span>, <span class=\"string\">'__hash__'</span>, <span class=\"string\">'__iadd__'</span>, <span class=\"string\">'__imul__'</span>, <span class=\"string\">'__init__'</span>, <span class=\"string\">'__iter__'</span>, <span class=\"string\">'__le__'</span>, <span class=\"string\">'__len__'</span>, <span class=\"string\">'__lt__'</span>, <span class=\"string\">'__mul__'</span>, <span class=\"string\">'__ne__'</span>, <span class=\"string\">'__new__'</span>, <span class=\"string\">'__reduce__'</span>, <span class=\"string\">'__reduce_ex__'</span>, <span class=\"string\">'__repr__'</span>, <span class=\"string\">'__reversed__'</span>, <span class=\"string\">'__rmul__'</span>, <span class=\"string\">'__setattr__'</span>, <span class=\"string\">'__setitem__'</span>, <span class=\"string\">'__setslice__'</span>, <span class=\"string\">'__sizeof__'</span>, <span class=\"string\">'__str__'</span>, <span class=\"string\">'__subclasshook__'</span>, <span class=\"string\">'append'</span>, <span class=\"string\">'count'</span>, <span class=\"string\">'extend'</span>, <span class=\"string\">'index'</span>, <span class=\"string\">'insert'</span>, <span class=\"string\">'pop'</span>, <span class=\"string\">'remove'</span>, <span class=\"string\">'reverse'</span>, <span class=\"string\">'sort'</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"贴士-12-简化-if-语句\"><a href=\"#贴士-12-简化-if-语句\" class=\"headerlink\" title=\"贴士#12. 简化 if 语句\"></a>贴士#12. 简化 if 语句</h2><p>我们可以使用下面的方式来验证多个值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]:</div></pre></td></tr></table></figure></p>\n<p>而不是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> m==<span class=\"number\">1</span> <span class=\"keyword\">or</span> m==<span class=\"number\">3</span> <span class=\"keyword\">or</span> m==<span class=\"number\">5</span> <span class=\"keyword\">or</span> m==<span class=\"number\">7</span>:</div></pre></td></tr></table></figure>\n<p>或者，对于 in 操作符我们也可以使用 ‘{1,3,5,7}’ 而不是 ‘[1,3,5,7]’，因为 set 中取元素是 O(1) 操作。</p>\n<h2 id=\"贴士-13-运行时检测-Python-版本\"><a href=\"#贴士-13-运行时检测-Python-版本\" class=\"headerlink\" title=\"贴士#13. 运行时检测 Python 版本\"></a>贴士#13. 运行时检测 Python 版本</h2><p>当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Detect the Python version currently in use.</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(sys, <span class=\"string\">\"hexversion\"</span>) <span class=\"keyword\">or</span> sys.hexversion != <span class=\"number\">50660080</span>:</div><div class=\"line\">    print(<span class=\"string\">\"Sorry, you aren't running on Python 3.5n\"</span>)</div><div class=\"line\">    print(<span class=\"string\">\"Please upgrade to 3.5.n\"</span>)</div><div class=\"line\">    sys.exit(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Print Python version in a readable format.</span></div><div class=\"line\">print(<span class=\"string\">\"Current Python version: \"</span>, sys.version)</div></pre></td></tr></table></figure>\n<p>或者你可以使用 sys.version_info &gt;= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。</p>\n<p>在 Python 2.7 上运行的结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Python 2.7.10 (default, Jul 14 2015, 19:46:27)</div><div class=\"line\">[GCC 4.8.2] on linux</div><div class=\"line\"></div><div class=\"line\">Sorry, you aren't running on Python 3.5</div><div class=\"line\"></div><div class=\"line\">Please upgrade to 3.5.</div></pre></td></tr></table></figure>\n<p>在 Python 3.5 上运行的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Python <span class=\"number\">3.5</span><span class=\"number\">.1</span> (default, Dec <span class=\"number\">2015</span>, <span class=\"number\">13</span>:<span class=\"number\">05</span>:<span class=\"number\">11</span>)</div><div class=\"line\">[GCC <span class=\"number\">4.8</span><span class=\"number\">.2</span>] on linux</div><div class=\"line\"></div><div class=\"line\">Current Python version:  <span class=\"number\">3.5</span><span class=\"number\">.2</span> (default, Aug <span class=\"number\">22</span> <span class=\"number\">2016</span>, <span class=\"number\">21</span>:<span class=\"number\">11</span>:<span class=\"number\">05</span>) </div><div class=\"line\">[GCC <span class=\"number\">5.3</span><span class=\"number\">.0</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"贴士-14-组合多个字符串\"><a href=\"#贴士-14-组合多个字符串\" class=\"headerlink\" title=\"贴士#14. 组合多个字符串\"></a>贴士#14. 组合多个字符串</h2><p>如果你想拼接列表中的所有记号，比如下面的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test = [<span class=\"string\">'I'</span>, <span class=\"string\">'Like'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'automation'</span>]</div></pre></td></tr></table></figure>\n<p>现在，让我们从上面给出的列表元素新建一个字符串：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(test)</div></pre></td></tr></table></figure></p>\n<h2 id=\"贴士-15-四种翻转字符串-列表的方式\"><a href=\"#贴士-15-四种翻转字符串-列表的方式\" class=\"headerlink\" title=\"贴士#15. 四种翻转字符串/列表的方式\"></a>贴士#15. 四种翻转字符串/列表的方式</h2><h3 id=\"翻转列表本身\"><a href=\"#翻转列表本身\" class=\"headerlink\" title=\"# 翻转列表本身\"></a># 翻转列表本身</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</div><div class=\"line\">testList.reverse()</div><div class=\"line\">print(testList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; [5, 3, 1]</span></div></pre></td></tr></table></figure>\n<h3 id=\"在一个循环中翻转并迭代输出\"><a href=\"#在一个循环中翻转并迭代输出\" class=\"headerlink\" title=\"# 在一个循环中翻转并迭代输出\"></a># 在一个循环中翻转并迭代输出</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> reversed([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]):</div><div class=\"line\">    print(element)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 5</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 3</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 1</span></div></pre></td></tr></table></figure>\n<h3 id=\"一行代码翻转字符串\"><a href=\"#一行代码翻转字符串\" class=\"headerlink\" title=\"# 一行代码翻转字符串\"></a># 一行代码翻转字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"Test Python\"</span>[::<span class=\"number\">-1</span>]</div></pre></td></tr></table></figure>\n<p>输出为 “nohtyP tseT”</p>\n<h3 id=\"使用切片翻转列表\"><a href=\"#使用切片翻转列表\" class=\"headerlink\" title=\"# 使用切片翻转列表\"></a># 使用切片翻转列表</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>][::<span class=\"number\">-1</span>]</div></pre></td></tr></table></figure>\n<p>上面的命令将会给出输出 [5,3,1]。</p>\n<h2 id=\"贴士-16-玩转枚举\"><a href=\"#贴士-16-玩转枚举\" class=\"headerlink\" title=\"#贴士#16. 玩转枚举\"></a>#贴士#16. 玩转枚举</h2><p>使用枚举可以在循环中方便地找到（当前的）索引：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">testlist = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> enumerate(testlist):</div><div class=\"line\">    print(i, <span class=\"string\">': '</span>, value)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 0 : 10</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1 : 20</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 2 : 30</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-17-在-Python-中使用枚举量\"><a href=\"#贴士-17-在-Python-中使用枚举量\" class=\"headerlink\" title=\"贴士#17. 在 Python 中使用枚举量\"></a>贴士#17. 在 Python 中使用枚举量</h2><p>我们可以使用下面的方式来定义枚举量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shapes</span>:</span></div><div class=\"line\">    Circle, Square, Triangle, Quadrangle = range(<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\">print(Shapes.Circle)</div><div class=\"line\">print(Shapes.Square)</div><div class=\"line\">print(Shapes.Triangle)</div><div class=\"line\">print(Shapes.Quadrangle)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 0</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 2</span></div><div class=\"line\"><span class=\"comment\">#4-&gt; 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-18-从方法中返回多个值\"><a href=\"#贴士-18-从方法中返回多个值\" class=\"headerlink\" title=\"贴士#18. 从方法中返回多个值\"></a>贴士#18. 从方法中返回多个值</h2><p>并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># function returning multiple values.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Calling the above function.</span></div><div class=\"line\">a, b, c, d = x()</div><div class=\"line\"></div><div class=\"line\">print(a, b, c, d)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1 2 3 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-19-使用-运算符（splat-operator）来-unpack-函数参数\"><a href=\"#贴士-19-使用-运算符（splat-operator）来-unpack-函数参数\" class=\"headerlink\" title=\"贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数\"></a>贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数</h2><ul>\n<li>运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(x, y, z)</span>:</span></div><div class=\"line\">    print(x, y, z)</div><div class=\"line\"></div><div class=\"line\">testDict = &#123;<span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">2</span>, <span class=\"string\">'z'</span>: <span class=\"number\">3</span>&#125; </div><div class=\"line\">testList = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</div><div class=\"line\"></div><div class=\"line\">test(*testDict)</div><div class=\"line\">test(**testDict)</div><div class=\"line\">test(*testList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; x y z</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1 2 3</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 10 20 30</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"贴士-20-使用字典来存储选择操作\"><a href=\"#贴士-20-使用字典来存储选择操作\" class=\"headerlink\" title=\"贴士#20. 使用字典来存储选择操作\"></a>贴士#20. 使用字典来存储选择操作</h2><p>我们能构造一个字典来存储表达式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">stdcalc = &#123;</div><div class=\"line\">    <span class=\"string\">'sum'</span>: <span class=\"keyword\">lambda</span> x, y: x + y,</div><div class=\"line\">    <span class=\"string\">'subtract'</span>: <span class=\"keyword\">lambda</span> x, y: x - y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">print(stdcalc[<span class=\"string\">'sum'</span>](<span class=\"number\">9</span>,<span class=\"number\">3</span>))</div><div class=\"line\">print(stdcalc[<span class=\"string\">'subtract'</span>](<span class=\"number\">9</span>,<span class=\"number\">3</span>))</div></pre></td></tr></table></figure></p>\n<h2 id=\"贴士-21-一行代码计算任何数的阶乘\"><a href=\"#贴士-21-一行代码计算任何数的阶乘\" class=\"headerlink\" title=\"贴士#21. 一行代码计算任何数的阶乘\"></a>贴士#21. 一行代码计算任何数的阶乘</h2><h3 id=\"Python-2-x\"><a href=\"#Python-2-x\" class=\"headerlink\" title=\"Python 2.x.\"></a>Python 2.x.</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = (<span class=\"keyword\">lambda</span> k: reduce(int.__mul__, range(<span class=\"number\">1</span>,k+<span class=\"number\">1</span>),<span class=\"number\">1</span>))(<span class=\"number\">3</span>)</div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 6</span></div></pre></td></tr></table></figure>\n<h3 id=\"Python-3-x\"><a href=\"#Python-3-x\" class=\"headerlink\" title=\"Python 3.x.\"></a>Python 3.x.</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> functools</div><div class=\"line\">result = (<span class=\"keyword\">lambda</span> k: functools.reduce(int.__mul__, range(<span class=\"number\">1</span>,k+<span class=\"number\">1</span>),<span class=\"number\">1</span>))(<span class=\"number\">3</span>)</div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 6</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-22-找到列表中出现最频繁的数\"><a href=\"#贴士-22-找到列表中出现最频繁的数\" class=\"headerlink\" title=\"贴士#22. 找到列表中出现最频繁的数\"></a>贴士#22. 找到列表中出现最频繁的数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</div><div class=\"line\">print(max(set(test), key=test.count))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-23-重置递归限制\"><a href=\"#贴士-23-重置递归限制\" class=\"headerlink\" title=\"贴士#23. 重置递归限制\"></a>贴士#23. 重置递归限制</h2><p>Python 限制递归次数到 1000，我们可以重置这个值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\">x=<span class=\"number\">1001</span></div><div class=\"line\">print(sys.getrecursionlimit())</div><div class=\"line\"></div><div class=\"line\">sys.setrecursionlimit(x)</div><div class=\"line\">print(sys.getrecursionlimit())</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1000</span></div><div class=\"line\"><span class=\"comment\">#-&gt; 1001</span></div></pre></td></tr></table></figure>\n<p>请只在必要的时候采用上面的技巧。</p>\n<h2 id=\"贴士-24-检查一个对象的内存使用\"><a href=\"#贴士-24-检查一个对象的内存使用\" class=\"headerlink\" title=\"贴士#24. 检查一个对象的内存使用\"></a>贴士#24. 检查一个对象的内存使用</h2><p>在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法：</p>\n<p>在 Python 2.7 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">x=<span class=\"number\">1</span></div><div class=\"line\">print(sys.getsizeof(x))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 24</span></div></pre></td></tr></table></figure>\n<p>在 Python 3.5 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">x=<span class=\"number\">1</span></div><div class=\"line\">print(sys.getsizeof(x))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 28</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-25-使用-slots-来减少内存开支\"><a href=\"#贴士-25-使用-slots-来减少内存开支\" class=\"headerlink\" title=\"贴士#25. 使用 slots 来减少内存开支\"></a>贴士#25. 使用 <strong>slots</strong> 来减少内存开支</h2><p>你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 <strong>slots</strong> 类变量来在一定程度上减少内存开支。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, files, folders, devices)</span>:</span></div><div class=\"line\">        self.files = files</div><div class=\"line\">        self.folders = folders</div><div class=\"line\">        self.devices = devices</div><div class=\"line\">print(sys.getsizeof( FileSystem ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem1</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    __slots__ = [<span class=\"string\">'files'</span>, <span class=\"string\">'folders'</span>, <span class=\"string\">'devices'</span>]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, files, folders, devices)</span>:</span></div><div class=\"line\">        self.files = files</div><div class=\"line\">        self.folders = folders</div><div class=\"line\">        self.devices = devices</div><div class=\"line\"></div><div class=\"line\">print(sys.getsizeof( FileSystem1 ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#In Python 3.5</span></div><div class=\"line\"><span class=\"comment\">#1-&gt; 1016</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 888</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 经测试 在我的 win10 python27 中跑出的结果是：</span></div><div class=\"line\"><span class=\"comment\">#1-&gt; 452</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 512</span></div></pre></td></tr></table></figure>\n<p>很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 <strong>slots</strong>。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。</p>\n<p>所以，这种比较方式是不那么让人信服的，使用 <strong>slots</strong> 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__\" target=\"_blank\" rel=\"external\">python 官方文档</a>:</p>\n<p>The slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. </p>\n<p>也可参考廖雪峰老师的 <a href=\"http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200605560b1bd3c660bf494282ede59fee17e781000\" target=\"_blank\" rel=\"external\">使用<strong>slots</strong></a> </p>\n<h2 id=\"贴士-26-使用-lambda-来模仿输出方法\"><a href=\"#贴士-26-使用-lambda-来模仿输出方法\" class=\"headerlink\" title=\"贴士#26. 使用 lambda 来模仿输出方法\"></a>贴士#26. 使用 lambda 来模仿输出方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">lprint=<span class=\"keyword\">lambda</span> *args:sys.stdout.write(<span class=\"string\">\" \"</span>.join(map(str,args)))</div><div class=\"line\">lprint(<span class=\"string\">\"python\"</span>, <span class=\"string\">\"tips\"</span>,<span class=\"number\">1000</span>,<span class=\"number\">1001</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; python tips 1000 1001</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-27-从两个相关的序列构建一个字典\"><a href=\"#贴士-27-从两个相关的序列构建一个字典\" class=\"headerlink\" title=\"贴士#27. 从两个相关的序列构建一个字典\"></a>贴士#27. 从两个相关的序列构建一个字典</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">t2 = (<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</div><div class=\"line\"></div><div class=\"line\">print(dict (zip(t1,t2)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; &#123;1: 10, 2: 20, 3: 30&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-28-一行代码搜索字符串的多个前后缀\"><a href=\"#贴士-28-一行代码搜索字符串的多个前后缀\" class=\"headerlink\" title=\"贴士#28. 一行代码搜索字符串的多个前后缀\"></a>贴士#28. 一行代码搜索字符串的多个前后缀</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(<span class=\"string\">\"http://www.google.com\"</span>.startswith((<span class=\"string\">\"http://\"</span>, <span class=\"string\">\"https://\"</span>)))</div><div class=\"line\">print(<span class=\"string\">\"http://www.google.co.uk\"</span>.endswith((<span class=\"string\">\".com\"</span>, <span class=\"string\">\".co.uk\"</span>)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; True</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; True</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-29-不使用循环构造一个列表\"><a href=\"#贴士-29-不使用循环构造一个列表\" class=\"headerlink\" title=\"贴士#29. 不使用循环构造一个列表\"></a>贴士#29. 不使用循环构造一个列表</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> itertools</div><div class=\"line\">test = [[<span class=\"number\">-1</span>, <span class=\"number\">-2</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>], [<span class=\"number\">25</span>, <span class=\"number\">35</span>]]</div><div class=\"line\">print(list(itertools.chain.from_iterable(test)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; [-1, -2, 30, 40, 25, 35]</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-30-在-Python-中实现一个真正的-switch-case-语句\"><a href=\"#贴士-30-在-Python-中实现一个真正的-switch-case-语句\" class=\"headerlink\" title=\"贴士#30. 在 Python 中实现一个真正的 switch-case 语句\"></a>贴士#30. 在 Python 中实现一个真正的 switch-case 语句</h2><p>下面的代码使用一个字典来模拟构造一个 switch-case。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xswitch</span><span class=\"params\">(x)</span>:</span> </div><div class=\"line\">    <span class=\"keyword\">return</span> xswitch._system_dict.get(x, <span class=\"keyword\">None</span>)</div><div class=\"line\"></div><div class=\"line\">xswitch._system_dict = &#123;<span class=\"string\">'files'</span>: <span class=\"number\">10</span>, <span class=\"string\">'folders'</span>: <span class=\"number\">5</span>, <span class=\"string\">'devices'</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\">print(xswitch(<span class=\"string\">'default'</span>))</div><div class=\"line\">print(xswitch(<span class=\"string\">'devices'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; None</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 2</span></div></pre></td></tr></table></figure>\n<p>结语 – 给程序员的基本 Python 贴士与技巧</p>\n<p>我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 &amp; 有效地完成任务，你可以在作业与项目中使用他们。</p>\n<p>听从你的回馈会使我们变得更好，所以请分享你的想法。</p>\n<p>你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】</p>\n<p>最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。</p>\n<p>坚持学习，</p>\n<p>TechBeamers.</p>\n<blockquote>\n<p>本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。</p>\n</blockquote>\n","excerpt":"<p>如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。<br>如果你还没有使用 python，相信看完下面 python 的实现，你会觉得<strong>编程也是一件幸福的事</strong>：）</p>\n<p><img src=\"/Image/python-love.png\" alt=\"Python_Love\"></p>\n<p>如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。</p>","more":"<p>我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？</p>\n<p>过去我们分享过 一些 <a href=\"http://www.techbeamers.com/top-10-python-coding-tips-for-beginners/\">给初学者的 Python 编程贴士</a> 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。</p>\n<p>所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。</p>\n<p>每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 <a href=\"http://www.techbeamers.com/best-python-interpreter-execute-python-online/\">在线虚拟 Python 运行终端</a>。</p>\n<p>最近我们发布的另两个必看的 Python 资源：</p>\n<p>💡 <a href=\"http://www.techbeamers.com/python-code-optimization-tips-tricks/\">9 种优化 Python 代码的主要方式</a></p>\n<p>💡 <a href=\"http://www.techbeamers.com/python-programming-mistakes/\">发现在编程时应该避免的最常见的错误</a></p>\n<h1 id=\"给程序员的-30-个基本-Python-贴士与技巧\"><a href=\"#给程序员的-30-个基本-Python-贴士与技巧\" class=\"headerlink\" title=\"给程序员的 30 个基本 Python 贴士与技巧\"></a>给程序员的 30 个基本 Python 贴士与技巧</h1><h2 id=\"贴士-1-原地交换两个数字\"><a href=\"#贴士-1-原地交换两个数字\" class=\"headerlink\" title=\"贴士#1. 原地交换两个数字\"></a>贴士#1. 原地交换两个数字</h2><p>Python 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">x, y = <span class=\"number\">10</span>, <span class=\"number\">20</span></div><div class=\"line\">print(x, y)</div><div class=\"line\"></div><div class=\"line\">x, y = y, x</div><div class=\"line\">print(x, y)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1 (10, 20)</span></div><div class=\"line\"><span class=\"comment\">#2 (20, 10)</span></div></pre></td></tr></table></figure>\n<p>赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a&gt; 和 &lt;b&gt;。</p>\n<p>一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。</p>\n<h2 id=\"贴士-2-链状比较操作符\"><a href=\"#贴士-2-链状比较操作符\" class=\"headerlink\" title=\"贴士#2. 链状比较操作符\"></a>贴士#2. 链状比较操作符</h2><p>比较操作符的聚合是另一个有时很方便的技巧：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = <span class=\"number\">10</span></div><div class=\"line\">result = <span class=\"number\">1</span> &lt; n &lt; <span class=\"number\">20</span></div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># True</span></div><div class=\"line\"></div><div class=\"line\">result = <span class=\"number\">1</span> &gt; n &lt;= <span class=\"number\">9</span></div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># False</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-3-使用三元操作符来进行条件赋值\"><a href=\"#贴士-3-使用三元操作符来进行条件赋值\" class=\"headerlink\" title=\"贴士#3. 使用三元操作符来进行条件赋值\"></a>贴士#3. 使用三元操作符来进行条件赋值</h2><p>三元操作符是 if-else 语句也就是条件操作符的一个快捷方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[表达式为真的返回值] <span class=\"keyword\">if</span> [表达式] <span class=\"keyword\">else</span> [表达式为假的返回值]</div></pre></td></tr></table></figure>\n<p>这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = <span class=\"number\">10</span> <span class=\"keyword\">if</span> (y == <span class=\"number\">9</span>) <span class=\"keyword\">else</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure>\n<p>同样地，我们可以对类做这种操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = (classA <span class=\"keyword\">if</span> y == <span class=\"number\">1</span> <span class=\"keyword\">else</span> classB)(param1, param2)</div></pre></td></tr></table></figure>\n<p>在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。</p>\n<p>下面是另一个多个条件表达式链接起来用以计算最小值的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">small</span><span class=\"params\">(a, b, c)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"keyword\">if</span> a &lt;= b <span class=\"keyword\">and</span> a &lt;= c <span class=\"keyword\">else</span> (b <span class=\"keyword\">if</span> b &lt;= a <span class=\"keyword\">and</span> b &lt;= c <span class=\"keyword\">else</span> c)</div><div class=\"line\"></div><div class=\"line\">print(small(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">print(small(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>))</div><div class=\"line\">print(small(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</div><div class=\"line\">print(small(<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Output</span></div><div class=\"line\"><span class=\"comment\">#0 #1 #2 #3</span></div></pre></td></tr></table></figure>\n<p>我们甚至可以在列表推导中使用三元运算符：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[m**<span class=\"number\">2</span> <span class=\"keyword\">if</span> m &gt; <span class=\"number\">10</span> <span class=\"keyword\">else</span> m**<span class=\"number\">4</span> <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>)]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#=&gt; [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401]</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-4-多行字符串\"><a href=\"#贴士-4-多行字符串\" class=\"headerlink\" title=\"贴士#4. 多行字符串\"></a>贴士#4. 多行字符串</h2><p>基本的方式是使用源于 C 语言的反斜杠：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr = <span class=\"string\">\"select * from multi_row \\</div><div class=\"line\">where row_id &lt; 5\"</span></div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># select * from multi_row where row_id &lt; 5</span></div></pre></td></tr></table></figure>\n<p>另一个技巧是使用三引号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr = <span class=\"string\">\"\"\"select * from multi_row </div><div class=\"line\">where row_id &lt; 5\"\"\"</span></div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#select * from multi_row </span></div><div class=\"line\"><span class=\"comment\">#where row_id &lt; 5</span></div></pre></td></tr></table></figure>\n<p>上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr= (<span class=\"string\">\"select * from multi_row \"</span></div><div class=\"line\">            <span class=\"string\">\"where row_id &lt; 5 \"</span></div><div class=\"line\">            <span class=\"string\">\"order by age\"</span>)</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#select * from multi_row where row_id &lt; 5 order by age</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-5-存储列表元素到新的变量中\"><a href=\"#贴士-5-存储列表元素到新的变量中\" class=\"headerlink\" title=\"贴士#5. 存储列表元素到新的变量中\"></a>贴士#5. 存储列表元素到新的变量中</h2><p>我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">x, y, z = testList</div><div class=\"line\"></div><div class=\"line\">print(x, y, z)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1 2 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-6-打印引入模块的文件路径\"><a href=\"#贴士-6-打印引入模块的文件路径\" class=\"headerlink\" title=\"贴士#6. 打印引入模块的文件路径\"></a>贴士#6. 打印引入模块的文件路径</h2><p>如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> threading </div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"></div><div class=\"line\">print(threading)</div><div class=\"line\">print(socket)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1- &lt;module 'threading' from '/usr/lib/python2.7/threading.py'&gt;</span></div><div class=\"line\"><span class=\"comment\">#2- &lt;module 'socket' from '/usr/lib/python2.7/socket.py'&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-7-交互环境下的-“-”-操作符\"><a href=\"#贴士-7-交互环境下的-“-”-操作符\" class=\"headerlink\" title=\"贴士#7. 交互环境下的 “_” 操作符\"></a>贴士#7. 交互环境下的 “_” 操作符</h2><p>这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>_</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> _</div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>“_” 是上一个执行的表达式的输出。</p>\n<h2 id=\"贴士-8-字典-集合推导\"><a href=\"#贴士-8-字典-集合推导\" class=\"headerlink\" title=\"贴士#8. 字典/集合推导\"></a>贴士#8. 字典/集合推导</h2><p>与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">testDict = &#123;i: i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)&#125; </div><div class=\"line\">testSet = &#123;i * <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)&#125;</div><div class=\"line\"></div><div class=\"line\">print(testSet)</div><div class=\"line\">print(testDict)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])</span></div><div class=\"line\"><span class=\"comment\">#&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&#125;</span></div></pre></td></tr></table></figure>\n<p>注：两个语句中只有一个 &lt;:&gt; 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange&gt; 改为 &lt;range&gt;。</p>\n<h2 id=\"贴士-9-调试脚本\"><a href=\"#贴士-9-调试脚本\" class=\"headerlink\" title=\"贴士#9. 调试脚本\"></a>贴士#9. 调试脚本</h2><p>我们可以在 &lt;pdb&gt; 模块的帮助下在 Python 脚本中设置断点，下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\">pdb.set_trace()</div></pre></td></tr></table></figure>\n<p>我们可以在脚本中任何位置指定 &lt;pdb.set_trace()&gt; 并且在那里设置一个断点，相当简便。</p>\n<h2 id=\"贴士-10-开启文件分享\"><a href=\"#贴士-10-开启文件分享\" class=\"headerlink\" title=\"贴士#10. 开启文件分享\"></a>贴士#10. 开启文件分享</h2><p>Python 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令：</p>\n<h3 id=\"Python-2\"><a href=\"#Python-2\" class=\"headerlink\" title=\"# Python 2\"></a># Python 2</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m SimpleHTTPServer</div></pre></td></tr></table></figure>\n<h3 id=\"Python-3\"><a href=\"#Python-3\" class=\"headerlink\" title=\"# Python 3\"></a># Python 3</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python3 -m http.server</div></pre></td></tr></table></figure>\n<p>上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。</p>\n<h2 id=\"贴士-11-检查-Python-中的对象\"><a href=\"#贴士-11-检查-Python-中的对象\" class=\"headerlink\" title=\"贴士#11. 检查 Python 中的对象\"></a>贴士#11. 检查 Python 中的对象</h2><p>我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\">print( dir(test) )</div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'__add__'</span>, <span class=\"string\">'__class__'</span>, <span class=\"string\">'__contains__'</span>, <span class=\"string\">'__delattr__'</span>, <span class=\"string\">'__delitem__'</span>, <span class=\"string\">'__delslice__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__eq__'</span>, <span class=\"string\">'__format__'</span>, <span class=\"string\">'__ge__'</span>, <span class=\"string\">'__getattribute__'</span>, <span class=\"string\">'__getitem__'</span>, <span class=\"string\">'__getslice__'</span>, <span class=\"string\">'__gt__'</span>, <span class=\"string\">'__hash__'</span>, <span class=\"string\">'__iadd__'</span>, <span class=\"string\">'__imul__'</span>, <span class=\"string\">'__init__'</span>, <span class=\"string\">'__iter__'</span>, <span class=\"string\">'__le__'</span>, <span class=\"string\">'__len__'</span>, <span class=\"string\">'__lt__'</span>, <span class=\"string\">'__mul__'</span>, <span class=\"string\">'__ne__'</span>, <span class=\"string\">'__new__'</span>, <span class=\"string\">'__reduce__'</span>, <span class=\"string\">'__reduce_ex__'</span>, <span class=\"string\">'__repr__'</span>, <span class=\"string\">'__reversed__'</span>, <span class=\"string\">'__rmul__'</span>, <span class=\"string\">'__setattr__'</span>, <span class=\"string\">'__setitem__'</span>, <span class=\"string\">'__setslice__'</span>, <span class=\"string\">'__sizeof__'</span>, <span class=\"string\">'__str__'</span>, <span class=\"string\">'__subclasshook__'</span>, <span class=\"string\">'append'</span>, <span class=\"string\">'count'</span>, <span class=\"string\">'extend'</span>, <span class=\"string\">'index'</span>, <span class=\"string\">'insert'</span>, <span class=\"string\">'pop'</span>, <span class=\"string\">'remove'</span>, <span class=\"string\">'reverse'</span>, <span class=\"string\">'sort'</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"贴士-12-简化-if-语句\"><a href=\"#贴士-12-简化-if-语句\" class=\"headerlink\" title=\"贴士#12. 简化 if 语句\"></a>贴士#12. 简化 if 语句</h2><p>我们可以使用下面的方式来验证多个值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]:</div></pre></td></tr></table></figure></p>\n<p>而不是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> m==<span class=\"number\">1</span> <span class=\"keyword\">or</span> m==<span class=\"number\">3</span> <span class=\"keyword\">or</span> m==<span class=\"number\">5</span> <span class=\"keyword\">or</span> m==<span class=\"number\">7</span>:</div></pre></td></tr></table></figure>\n<p>或者，对于 in 操作符我们也可以使用 ‘{1,3,5,7}’ 而不是 ‘[1,3,5,7]’，因为 set 中取元素是 O(1) 操作。</p>\n<h2 id=\"贴士-13-运行时检测-Python-版本\"><a href=\"#贴士-13-运行时检测-Python-版本\" class=\"headerlink\" title=\"贴士#13. 运行时检测 Python 版本\"></a>贴士#13. 运行时检测 Python 版本</h2><p>当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Detect the Python version currently in use.</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(sys, <span class=\"string\">\"hexversion\"</span>) <span class=\"keyword\">or</span> sys.hexversion != <span class=\"number\">50660080</span>:</div><div class=\"line\">    print(<span class=\"string\">\"Sorry, you aren't running on Python 3.5n\"</span>)</div><div class=\"line\">    print(<span class=\"string\">\"Please upgrade to 3.5.n\"</span>)</div><div class=\"line\">    sys.exit(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Print Python version in a readable format.</span></div><div class=\"line\">print(<span class=\"string\">\"Current Python version: \"</span>, sys.version)</div></pre></td></tr></table></figure>\n<p>或者你可以使用 sys.version_info &gt;= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。</p>\n<p>在 Python 2.7 上运行的结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Python 2.7.10 (default, Jul 14 2015, 19:46:27)</div><div class=\"line\">[GCC 4.8.2] on linux</div><div class=\"line\"></div><div class=\"line\">Sorry, you aren't running on Python 3.5</div><div class=\"line\"></div><div class=\"line\">Please upgrade to 3.5.</div></pre></td></tr></table></figure>\n<p>在 Python 3.5 上运行的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Python <span class=\"number\">3.5</span><span class=\"number\">.1</span> (default, Dec <span class=\"number\">2015</span>, <span class=\"number\">13</span>:<span class=\"number\">05</span>:<span class=\"number\">11</span>)</div><div class=\"line\">[GCC <span class=\"number\">4.8</span><span class=\"number\">.2</span>] on linux</div><div class=\"line\"></div><div class=\"line\">Current Python version:  <span class=\"number\">3.5</span><span class=\"number\">.2</span> (default, Aug <span class=\"number\">22</span> <span class=\"number\">2016</span>, <span class=\"number\">21</span>:<span class=\"number\">11</span>:<span class=\"number\">05</span>) </div><div class=\"line\">[GCC <span class=\"number\">5.3</span><span class=\"number\">.0</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"贴士-14-组合多个字符串\"><a href=\"#贴士-14-组合多个字符串\" class=\"headerlink\" title=\"贴士#14. 组合多个字符串\"></a>贴士#14. 组合多个字符串</h2><p>如果你想拼接列表中的所有记号，比如下面的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test = [<span class=\"string\">'I'</span>, <span class=\"string\">'Like'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'automation'</span>]</div></pre></td></tr></table></figure>\n<p>现在，让我们从上面给出的列表元素新建一个字符串：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(test)</div></pre></td></tr></table></figure></p>\n<h2 id=\"贴士-15-四种翻转字符串-列表的方式\"><a href=\"#贴士-15-四种翻转字符串-列表的方式\" class=\"headerlink\" title=\"贴士#15. 四种翻转字符串/列表的方式\"></a>贴士#15. 四种翻转字符串/列表的方式</h2><h3 id=\"翻转列表本身\"><a href=\"#翻转列表本身\" class=\"headerlink\" title=\"# 翻转列表本身\"></a># 翻转列表本身</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</div><div class=\"line\">testList.reverse()</div><div class=\"line\">print(testList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; [5, 3, 1]</span></div></pre></td></tr></table></figure>\n<h3 id=\"在一个循环中翻转并迭代输出\"><a href=\"#在一个循环中翻转并迭代输出\" class=\"headerlink\" title=\"# 在一个循环中翻转并迭代输出\"></a># 在一个循环中翻转并迭代输出</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> reversed([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]):</div><div class=\"line\">    print(element)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 5</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 3</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 1</span></div></pre></td></tr></table></figure>\n<h3 id=\"一行代码翻转字符串\"><a href=\"#一行代码翻转字符串\" class=\"headerlink\" title=\"# 一行代码翻转字符串\"></a># 一行代码翻转字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"Test Python\"</span>[::<span class=\"number\">-1</span>]</div></pre></td></tr></table></figure>\n<p>输出为 “nohtyP tseT”</p>\n<h3 id=\"使用切片翻转列表\"><a href=\"#使用切片翻转列表\" class=\"headerlink\" title=\"# 使用切片翻转列表\"></a># 使用切片翻转列表</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>][::<span class=\"number\">-1</span>]</div></pre></td></tr></table></figure>\n<p>上面的命令将会给出输出 [5,3,1]。</p>\n<h2 id=\"贴士-16-玩转枚举\"><a href=\"#贴士-16-玩转枚举\" class=\"headerlink\" title=\"#贴士#16. 玩转枚举\"></a>#贴士#16. 玩转枚举</h2><p>使用枚举可以在循环中方便地找到（当前的）索引：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">testlist = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> enumerate(testlist):</div><div class=\"line\">    print(i, <span class=\"string\">': '</span>, value)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 0 : 10</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1 : 20</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 2 : 30</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-17-在-Python-中使用枚举量\"><a href=\"#贴士-17-在-Python-中使用枚举量\" class=\"headerlink\" title=\"贴士#17. 在 Python 中使用枚举量\"></a>贴士#17. 在 Python 中使用枚举量</h2><p>我们可以使用下面的方式来定义枚举量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shapes</span>:</span></div><div class=\"line\">    Circle, Square, Triangle, Quadrangle = range(<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\">print(Shapes.Circle)</div><div class=\"line\">print(Shapes.Square)</div><div class=\"line\">print(Shapes.Triangle)</div><div class=\"line\">print(Shapes.Quadrangle)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 0</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 2</span></div><div class=\"line\"><span class=\"comment\">#4-&gt; 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-18-从方法中返回多个值\"><a href=\"#贴士-18-从方法中返回多个值\" class=\"headerlink\" title=\"贴士#18. 从方法中返回多个值\"></a>贴士#18. 从方法中返回多个值</h2><p>并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># function returning multiple values.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Calling the above function.</span></div><div class=\"line\">a, b, c, d = x()</div><div class=\"line\"></div><div class=\"line\">print(a, b, c, d)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1 2 3 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-19-使用-运算符（splat-operator）来-unpack-函数参数\"><a href=\"#贴士-19-使用-运算符（splat-operator）来-unpack-函数参数\" class=\"headerlink\" title=\"贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数\"></a>贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数</h2><ul>\n<li>运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(x, y, z)</span>:</span></div><div class=\"line\">    print(x, y, z)</div><div class=\"line\"></div><div class=\"line\">testDict = &#123;<span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">2</span>, <span class=\"string\">'z'</span>: <span class=\"number\">3</span>&#125; </div><div class=\"line\">testList = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</div><div class=\"line\"></div><div class=\"line\">test(*testDict)</div><div class=\"line\">test(**testDict)</div><div class=\"line\">test(*testList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; x y z</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1 2 3</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 10 20 30</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"贴士-20-使用字典来存储选择操作\"><a href=\"#贴士-20-使用字典来存储选择操作\" class=\"headerlink\" title=\"贴士#20. 使用字典来存储选择操作\"></a>贴士#20. 使用字典来存储选择操作</h2><p>我们能构造一个字典来存储表达式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">stdcalc = &#123;</div><div class=\"line\">    <span class=\"string\">'sum'</span>: <span class=\"keyword\">lambda</span> x, y: x + y,</div><div class=\"line\">    <span class=\"string\">'subtract'</span>: <span class=\"keyword\">lambda</span> x, y: x - y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">print(stdcalc[<span class=\"string\">'sum'</span>](<span class=\"number\">9</span>,<span class=\"number\">3</span>))</div><div class=\"line\">print(stdcalc[<span class=\"string\">'subtract'</span>](<span class=\"number\">9</span>,<span class=\"number\">3</span>))</div></pre></td></tr></table></figure></p>\n<h2 id=\"贴士-21-一行代码计算任何数的阶乘\"><a href=\"#贴士-21-一行代码计算任何数的阶乘\" class=\"headerlink\" title=\"贴士#21. 一行代码计算任何数的阶乘\"></a>贴士#21. 一行代码计算任何数的阶乘</h2><h3 id=\"Python-2-x\"><a href=\"#Python-2-x\" class=\"headerlink\" title=\"Python 2.x.\"></a>Python 2.x.</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = (<span class=\"keyword\">lambda</span> k: reduce(int.__mul__, range(<span class=\"number\">1</span>,k+<span class=\"number\">1</span>),<span class=\"number\">1</span>))(<span class=\"number\">3</span>)</div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 6</span></div></pre></td></tr></table></figure>\n<h3 id=\"Python-3-x\"><a href=\"#Python-3-x\" class=\"headerlink\" title=\"Python 3.x.\"></a>Python 3.x.</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> functools</div><div class=\"line\">result = (<span class=\"keyword\">lambda</span> k: functools.reduce(int.__mul__, range(<span class=\"number\">1</span>,k+<span class=\"number\">1</span>),<span class=\"number\">1</span>))(<span class=\"number\">3</span>)</div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 6</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-22-找到列表中出现最频繁的数\"><a href=\"#贴士-22-找到列表中出现最频繁的数\" class=\"headerlink\" title=\"贴士#22. 找到列表中出现最频繁的数\"></a>贴士#22. 找到列表中出现最频繁的数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</div><div class=\"line\">print(max(set(test), key=test.count))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-23-重置递归限制\"><a href=\"#贴士-23-重置递归限制\" class=\"headerlink\" title=\"贴士#23. 重置递归限制\"></a>贴士#23. 重置递归限制</h2><p>Python 限制递归次数到 1000，我们可以重置这个值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\">x=<span class=\"number\">1001</span></div><div class=\"line\">print(sys.getrecursionlimit())</div><div class=\"line\"></div><div class=\"line\">sys.setrecursionlimit(x)</div><div class=\"line\">print(sys.getrecursionlimit())</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1000</span></div><div class=\"line\"><span class=\"comment\">#-&gt; 1001</span></div></pre></td></tr></table></figure>\n<p>请只在必要的时候采用上面的技巧。</p>\n<h2 id=\"贴士-24-检查一个对象的内存使用\"><a href=\"#贴士-24-检查一个对象的内存使用\" class=\"headerlink\" title=\"贴士#24. 检查一个对象的内存使用\"></a>贴士#24. 检查一个对象的内存使用</h2><p>在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法：</p>\n<p>在 Python 2.7 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">x=<span class=\"number\">1</span></div><div class=\"line\">print(sys.getsizeof(x))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 24</span></div></pre></td></tr></table></figure>\n<p>在 Python 3.5 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">x=<span class=\"number\">1</span></div><div class=\"line\">print(sys.getsizeof(x))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 28</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-25-使用-slots-来减少内存开支\"><a href=\"#贴士-25-使用-slots-来减少内存开支\" class=\"headerlink\" title=\"贴士#25. 使用 slots 来减少内存开支\"></a>贴士#25. 使用 <strong>slots</strong> 来减少内存开支</h2><p>你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 <strong>slots</strong> 类变量来在一定程度上减少内存开支。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, files, folders, devices)</span>:</span></div><div class=\"line\">        self.files = files</div><div class=\"line\">        self.folders = folders</div><div class=\"line\">        self.devices = devices</div><div class=\"line\">print(sys.getsizeof( FileSystem ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem1</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    __slots__ = [<span class=\"string\">'files'</span>, <span class=\"string\">'folders'</span>, <span class=\"string\">'devices'</span>]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, files, folders, devices)</span>:</span></div><div class=\"line\">        self.files = files</div><div class=\"line\">        self.folders = folders</div><div class=\"line\">        self.devices = devices</div><div class=\"line\"></div><div class=\"line\">print(sys.getsizeof( FileSystem1 ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#In Python 3.5</span></div><div class=\"line\"><span class=\"comment\">#1-&gt; 1016</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 888</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 经测试 在我的 win10 python27 中跑出的结果是：</span></div><div class=\"line\"><span class=\"comment\">#1-&gt; 452</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 512</span></div></pre></td></tr></table></figure>\n<p>很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 <strong>slots</strong>。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。</p>\n<p>所以，这种比较方式是不那么让人信服的，使用 <strong>slots</strong> 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__\">python 官方文档</a>:</p>\n<p>The slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. </p>\n<p>也可参考廖雪峰老师的 <a href=\"http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200605560b1bd3c660bf494282ede59fee17e781000\">使用<strong>slots</strong></a> </p>\n<h2 id=\"贴士-26-使用-lambda-来模仿输出方法\"><a href=\"#贴士-26-使用-lambda-来模仿输出方法\" class=\"headerlink\" title=\"贴士#26. 使用 lambda 来模仿输出方法\"></a>贴士#26. 使用 lambda 来模仿输出方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">lprint=<span class=\"keyword\">lambda</span> *args:sys.stdout.write(<span class=\"string\">\" \"</span>.join(map(str,args)))</div><div class=\"line\">lprint(<span class=\"string\">\"python\"</span>, <span class=\"string\">\"tips\"</span>,<span class=\"number\">1000</span>,<span class=\"number\">1001</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; python tips 1000 1001</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-27-从两个相关的序列构建一个字典\"><a href=\"#贴士-27-从两个相关的序列构建一个字典\" class=\"headerlink\" title=\"贴士#27. 从两个相关的序列构建一个字典\"></a>贴士#27. 从两个相关的序列构建一个字典</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">t2 = (<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</div><div class=\"line\"></div><div class=\"line\">print(dict (zip(t1,t2)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; &#123;1: 10, 2: 20, 3: 30&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-28-一行代码搜索字符串的多个前后缀\"><a href=\"#贴士-28-一行代码搜索字符串的多个前后缀\" class=\"headerlink\" title=\"贴士#28. 一行代码搜索字符串的多个前后缀\"></a>贴士#28. 一行代码搜索字符串的多个前后缀</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(<span class=\"string\">\"http://www.google.com\"</span>.startswith((<span class=\"string\">\"http://\"</span>, <span class=\"string\">\"https://\"</span>)))</div><div class=\"line\">print(<span class=\"string\">\"http://www.google.co.uk\"</span>.endswith((<span class=\"string\">\".com\"</span>, <span class=\"string\">\".co.uk\"</span>)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; True</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; True</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-29-不使用循环构造一个列表\"><a href=\"#贴士-29-不使用循环构造一个列表\" class=\"headerlink\" title=\"贴士#29. 不使用循环构造一个列表\"></a>贴士#29. 不使用循环构造一个列表</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> itertools</div><div class=\"line\">test = [[<span class=\"number\">-1</span>, <span class=\"number\">-2</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>], [<span class=\"number\">25</span>, <span class=\"number\">35</span>]]</div><div class=\"line\">print(list(itertools.chain.from_iterable(test)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; [-1, -2, 30, 40, 25, 35]</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-30-在-Python-中实现一个真正的-switch-case-语句\"><a href=\"#贴士-30-在-Python-中实现一个真正的-switch-case-语句\" class=\"headerlink\" title=\"贴士#30. 在 Python 中实现一个真正的 switch-case 语句\"></a>贴士#30. 在 Python 中实现一个真正的 switch-case 语句</h2><p>下面的代码使用一个字典来模拟构造一个 switch-case。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xswitch</span><span class=\"params\">(x)</span>:</span> </div><div class=\"line\">    <span class=\"keyword\">return</span> xswitch._system_dict.get(x, <span class=\"keyword\">None</span>)</div><div class=\"line\"></div><div class=\"line\">xswitch._system_dict = &#123;<span class=\"string\">'files'</span>: <span class=\"number\">10</span>, <span class=\"string\">'folders'</span>: <span class=\"number\">5</span>, <span class=\"string\">'devices'</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\">print(xswitch(<span class=\"string\">'default'</span>))</div><div class=\"line\">print(xswitch(<span class=\"string\">'devices'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; None</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 2</span></div></pre></td></tr></table></figure>\n<p>结语 – 给程序员的基本 Python 贴士与技巧</p>\n<p>我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 &amp; 有效地完成任务，你可以在作业与项目中使用他们。</p>\n<p>听从你的回馈会使我们变得更好，所以请分享你的想法。</p>\n<p>你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】</p>\n<p>最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。</p>\n<p>坚持学习，</p>\n<p>TechBeamers.</p>\n<blockquote>\n<p>本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。</p>\n</blockquote>"},{"title":"你需要一个老头，帮助你理解下 Python 中的 yield","date":"2016-12-14T08:01:01.000Z","layout":"post","comments":1,"reward":true,"_content":"\n> **题外话**\n> * 最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 `yield` 这里看过去了，知道这个东西是用来造一个`生成器`用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。\n> * 我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。\n> * <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n----------\n\n### 说起 `yield`，那这到底是个什么玩意？\n\n准备好了，我要开始背课文了：\n……\n<!--more-->\n从小脑袋不好使，记不住……\n还是编故事吧：\n\n有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：\n> 有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）\n\n提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）\n\n不行，我也要凑热闹。（koujiao……）\n\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print b\n        a, b = b, a + b\n        n = n + 1\n```\n好，跑一下试试。\n```python\n>>> fab(5)\n1\n1\n2\n3\n5\n```\n结果是对的，你以为这就完了？\n隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接`print`出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）\n好，那就听您老的，给你返回一个 List 让你用（？？？）。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    list = []\n    while n < max:\n        list.append(b)\n        a, b = b, a + b\n        n = n + 1\n    return list\n```\n来，试一下。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。\n\n### 性能优化\n\n如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西`xrange`。\n```python\n# 1\nfor i in range(1000): \n    pass\n\n# 2\nfor i in xrange(1000):\n    pass\n```\n上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）\n\n好，实现一个。\n```python\nclass Fab(object):\n    \n    def __init__(self, max):\n        self.max = max\n        self.n, self.a, self.b = 0, 0, 1\n        \n    def __iter__(self):\n        return self\n        \n    def next(self):\n        if self.n < self.max:\n            r = self.b\n            self.a, self.b = self.b, self.a + self.b\n            self.n = self.n + 1\n            return r\n        raise StopIteration()\n```\n基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。\n我们来调用一下：\n```python\n>>> for n in Fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。\n\n很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。\n\n来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        # print b\n        a, b = b, a + b\n        n = n + 1\n```\n跟最初的第一个版本很像，注释掉了`print b`这句话，加上了 `yield b`。这里我们先调用下，看看结果。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n### 吹牛B模式已开启\nok, 现在来回想下我们一路走过来，从最初的版本到使用`yield`之前，经历了哪些改动？\n仔细对照第一次的例子和这个使用`yield`的例子，好像差不多？再看看我们测试结果的代码有什么不同。\n就是这里了\n```python\n# 第一个例子\nfab(5)\n\n# yield例子\nfor n in fab(5)\n    print n\n```\n发现问题了吗？\n> * fab(max) 函数中同样使用循环\n> * 一个使用 yield，另一个使用 print 打印\n> * yield 例子，需要自己循环调用才能一个一个打印出来\n\n这里我们推测`yield`使用上的特点：\n> * 暂停函数运行（要循环调用才管用）\n> * 再次调用能从上次暂停的地方继续执行函数（数列是连续的）\n> * 函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续\n> * 对不起我编不下去了\n\n据说还有更强大的使用方式，下次有机会研究研究写个续吧：）\n\n----------\n**隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。**\n\n例子取自：[廖雪峰-Python yield使用浅析](http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000)","source":"_posts/python_yield1.md","raw":"---\ntitle: 你需要一个老头，帮助你理解下 Python 中的 yield\ndate: 2016-12-14 16:01:01\nlayout: post\ncomments: true\nreward: true\ntags:\n    - python\n\n---\n\n> **题外话**\n> * 最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 `yield` 这里看过去了，知道这个东西是用来造一个`生成器`用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。\n> * 我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。\n> * <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n----------\n\n### 说起 `yield`，那这到底是个什么玩意？\n\n准备好了，我要开始背课文了：\n……\n<!--more-->\n从小脑袋不好使，记不住……\n还是编故事吧：\n\n有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：\n> 有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）\n\n提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）\n\n不行，我也要凑热闹。（koujiao……）\n\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print b\n        a, b = b, a + b\n        n = n + 1\n```\n好，跑一下试试。\n```python\n>>> fab(5)\n1\n1\n2\n3\n5\n```\n结果是对的，你以为这就完了？\n隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接`print`出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）\n好，那就听您老的，给你返回一个 List 让你用（？？？）。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    list = []\n    while n < max:\n        list.append(b)\n        a, b = b, a + b\n        n = n + 1\n    return list\n```\n来，试一下。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。\n\n### 性能优化\n\n如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西`xrange`。\n```python\n# 1\nfor i in range(1000): \n    pass\n\n# 2\nfor i in xrange(1000):\n    pass\n```\n上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）\n\n好，实现一个。\n```python\nclass Fab(object):\n    \n    def __init__(self, max):\n        self.max = max\n        self.n, self.a, self.b = 0, 0, 1\n        \n    def __iter__(self):\n        return self\n        \n    def next(self):\n        if self.n < self.max:\n            r = self.b\n            self.a, self.b = self.b, self.a + self.b\n            self.n = self.n + 1\n            return r\n        raise StopIteration()\n```\n基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。\n我们来调用一下：\n```python\n>>> for n in Fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。\n\n很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。\n\n来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        # print b\n        a, b = b, a + b\n        n = n + 1\n```\n跟最初的第一个版本很像，注释掉了`print b`这句话，加上了 `yield b`。这里我们先调用下，看看结果。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n### 吹牛B模式已开启\nok, 现在来回想下我们一路走过来，从最初的版本到使用`yield`之前，经历了哪些改动？\n仔细对照第一次的例子和这个使用`yield`的例子，好像差不多？再看看我们测试结果的代码有什么不同。\n就是这里了\n```python\n# 第一个例子\nfab(5)\n\n# yield例子\nfor n in fab(5)\n    print n\n```\n发现问题了吗？\n> * fab(max) 函数中同样使用循环\n> * 一个使用 yield，另一个使用 print 打印\n> * yield 例子，需要自己循环调用才能一个一个打印出来\n\n这里我们推测`yield`使用上的特点：\n> * 暂停函数运行（要循环调用才管用）\n> * 再次调用能从上次暂停的地方继续执行函数（数列是连续的）\n> * 函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续\n> * 对不起我编不下去了\n\n据说还有更强大的使用方式，下次有机会研究研究写个续吧：）\n\n----------\n**隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。**\n\n例子取自：[廖雪峰-Python yield使用浅析](http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000)","slug":"python_yield1","published":1,"updated":"2017-06-01T05:53:59.796Z","photos":[],"link":"","_id":"cj3e9p4vv000bhgtzw1ul8lt7","content":"<blockquote>\n<p><strong>题外话</strong></p>\n<ul>\n<li>最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 <code>yield</code> 这里看过去了，知道这个东西是用来造一个<code>生成器</code>用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。</li>\n<li>我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。</li>\n<li><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"说起-yield，那这到底是个什么玩意？\"><a href=\"#说起-yield，那这到底是个什么玩意？\" class=\"headerlink\" title=\"说起 yield，那这到底是个什么玩意？\"></a>说起 <code>yield</code>，那这到底是个什么玩意？</h3><p>准备好了，我要开始背课文了：<br>……<br><a id=\"more\"></a><br>从小脑袋不好使，记不住……<br>还是编故事吧：</p>\n<p>有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：</p>\n<blockquote>\n<p>有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）</p>\n</blockquote>\n<p>提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）</p>\n<p>不行，我也要凑热闹。（koujiao……）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">print</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>好，跑一下试试。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fab(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>结果是对的，你以为这就完了？<br>隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接<code>print</code>出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）<br>好，那就听您老的，给你返回一个 List 让你用（？？？）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    list = []</div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        list.append(b)</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list</div></pre></td></tr></table></figure></p>\n<p>来，试一下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。</p>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西<code>xrange</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>): </div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1000</span>):</div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）</p>\n<p>好，实现一个。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fab</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, max)</span>:</span></div><div class=\"line\">        self.max = max</div><div class=\"line\">        self.n, self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.n &lt; self.max:</div><div class=\"line\">            r = self.b</div><div class=\"line\">            self.a, self.b = self.b, self.a + self.b</div><div class=\"line\">            self.n = self.n + <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> r</div><div class=\"line\">        <span class=\"keyword\">raise</span> StopIteration()</div></pre></td></tr></table></figure></p>\n<p>基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。<br>我们来调用一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。</p>\n<p>很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。</p>\n<p>来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        <span class=\"comment\"># print b</span></div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>跟最初的第一个版本很像，注释掉了<code>print b</code>这句话，加上了 <code>yield b</code>。这里我们先调用下，看看结果。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"吹牛B模式已开启\"><a href=\"#吹牛B模式已开启\" class=\"headerlink\" title=\"吹牛B模式已开启\"></a>吹牛B模式已开启</h3><p>ok, 现在来回想下我们一路走过来，从最初的版本到使用<code>yield</code>之前，经历了哪些改动？<br>仔细对照第一次的例子和这个使用<code>yield</code>的例子，好像差不多？再看看我们测试结果的代码有什么不同。<br>就是这里了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 第一个例子</span></div><div class=\"line\">fab(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># yield例子</span></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure></p>\n<p>发现问题了吗？</p>\n<blockquote>\n<ul>\n<li>fab(max) 函数中同样使用循环</li>\n<li>一个使用 yield，另一个使用 print 打印</li>\n<li>yield 例子，需要自己循环调用才能一个一个打印出来</li>\n</ul>\n</blockquote>\n<p>这里我们推测<code>yield</code>使用上的特点：</p>\n<blockquote>\n<ul>\n<li>暂停函数运行（要循环调用才管用）</li>\n<li>再次调用能从上次暂停的地方继续执行函数（数列是连续的）</li>\n<li>函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续</li>\n<li>对不起我编不下去了</li>\n</ul>\n</blockquote>\n<p>据说还有更强大的使用方式，下次有机会研究研究写个续吧：）</p>\n<hr>\n<p><strong>隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。</strong></p>\n<p>例子取自：<a href=\"http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000\" target=\"_blank\" rel=\"external\">廖雪峰-Python yield使用浅析</a></p>\n","excerpt":"<blockquote>\n<p><strong>题外话</strong></p>\n<ul>\n<li>最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 <code>yield</code> 这里看过去了，知道这个东西是用来造一个<code>生成器</code>用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。</li>\n<li>我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。</li>\n<li><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"说起-yield，那这到底是个什么玩意？\"><a href=\"#说起-yield，那这到底是个什么玩意？\" class=\"headerlink\" title=\"说起 yield，那这到底是个什么玩意？\"></a>说起 <code>yield</code>，那这到底是个什么玩意？</h3><p>准备好了，我要开始背课文了：<br>……<br>","more":"<br>从小脑袋不好使，记不住……<br>还是编故事吧：</p>\n<p>有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：</p>\n<blockquote>\n<p>有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）</p>\n</blockquote>\n<p>提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）</p>\n<p>不行，我也要凑热闹。（koujiao……）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">print</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>好，跑一下试试。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fab(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>结果是对的，你以为这就完了？<br>隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接<code>print</code>出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）<br>好，那就听您老的，给你返回一个 List 让你用（？？？）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    list = []</div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        list.append(b)</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list</div></pre></td></tr></table></figure></p>\n<p>来，试一下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。</p>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西<code>xrange</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>): </div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1000</span>):</div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）</p>\n<p>好，实现一个。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fab</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, max)</span>:</span></div><div class=\"line\">        self.max = max</div><div class=\"line\">        self.n, self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.n &lt; self.max:</div><div class=\"line\">            r = self.b</div><div class=\"line\">            self.a, self.b = self.b, self.a + self.b</div><div class=\"line\">            self.n = self.n + <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> r</div><div class=\"line\">        <span class=\"keyword\">raise</span> StopIteration()</div></pre></td></tr></table></figure></p>\n<p>基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。<br>我们来调用一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。</p>\n<p>很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。</p>\n<p>来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        <span class=\"comment\"># print b</span></div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>跟最初的第一个版本很像，注释掉了<code>print b</code>这句话，加上了 <code>yield b</code>。这里我们先调用下，看看结果。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"吹牛B模式已开启\"><a href=\"#吹牛B模式已开启\" class=\"headerlink\" title=\"吹牛B模式已开启\"></a>吹牛B模式已开启</h3><p>ok, 现在来回想下我们一路走过来，从最初的版本到使用<code>yield</code>之前，经历了哪些改动？<br>仔细对照第一次的例子和这个使用<code>yield</code>的例子，好像差不多？再看看我们测试结果的代码有什么不同。<br>就是这里了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 第一个例子</span></div><div class=\"line\">fab(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># yield例子</span></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure></p>\n<p>发现问题了吗？</p>\n<blockquote>\n<ul>\n<li>fab(max) 函数中同样使用循环</li>\n<li>一个使用 yield，另一个使用 print 打印</li>\n<li>yield 例子，需要自己循环调用才能一个一个打印出来</li>\n</ul>\n</blockquote>\n<p>这里我们推测<code>yield</code>使用上的特点：</p>\n<blockquote>\n<ul>\n<li>暂停函数运行（要循环调用才管用）</li>\n<li>再次调用能从上次暂停的地方继续执行函数（数列是连续的）</li>\n<li>函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续</li>\n<li>对不起我编不下去了</li>\n</ul>\n</blockquote>\n<p>据说还有更强大的使用方式，下次有机会研究研究写个续吧：）</p>\n<hr>\n<p><strong>隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。</strong></p>\n<p>例子取自：<a href=\"http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000\">廖雪峰-Python yield使用浅析</a></p>"},{"title":"那些萦绕在我记忆里的一些歌曲(未完 更于2017-04-27)","date":"2017-04-26T16:19:49.000Z","layout":"post","comments":1,"--reward":true,"_content":"\n> 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。\n\n![walk_away](/Image/walk_away.jpg)\n\n<!--more-->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=277722&auto=0&height=66\"></iframe>\n\n蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。  \n\n长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。\n\n一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。\n\n有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。\n\n印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=165364&auto=0&height=66\"></iframe> \n\n汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。\n\n现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。\n\n讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。\n\n当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。\n\n现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。\n\n像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。”\n\n我始终觉得，让你困在过去的歌曲，不是你应该听的歌。\n\n我在听的，多半是这段回不去的路，和这路上的每一步吧。\n\n\n<script type=\"text/javascript\" src=\"http://www.xiami.com/widget/player-single?uid=0&sid=380252&mode=js\"></script>\n\n梁静茹的歌总是会让你体会到那种纯粹的感情\n\n“我可以假装看不见，也可以偷偷的想念”\n\n“知了也睡了，安心的睡了” \n\n那时的我们，向往着这种连空气都会变得很轻松的感情。\n\n当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28191530&auto=0&height=66\"></iframe>\n\n当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。\n\n当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。\n\n在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。\n\n如果你想看一集动画片，你可能要点4-5次才能看完一集。\n\n想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。\n\n有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。\n\n守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。\n\n众筹的思想在小朋友的身上已经生根发芽了。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=69827&auto=0&height=66\"></iframe>\n\n那时我还听不懂。\n\n现在想想：\n\n“太多的借口”\n\n“太多的理由”\n\n“为了爱情我也背叛了所有”\n\n“如果你想离开我”\n\n“就别再畏畏缩缩”\n\n乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。\n\n可是仔细想想，如果真想离开你，还会找借口和理由吗？\n\n既已不再留恋，何必处处遮掩？\n\n你含泪看着对方的时候，又怎知对方不是在含泪望着你。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=307525&auto=0&height=66\"></iframe>  \n\n悄悄地喜欢一个人\n\n把握的恰到好处\n\n刚好瞒着他的同时，被全世界看穿了自己\n\n在那个人身上用尽了我们能表达出来的所有情绪\n\n把每一个电视剧里的故事都在脑海中排练了一遍\n\n一个不经意的动作，一句很自然的话\n\n能让自己对着自己在脑海中低语很久\n\n思绪随着天色浅浅有了光亮\n\n才叹着气睡去\n\n其实，我们只是刚好在那个时候\n\n需要完全陌生的人\n\n来感动自己\n\n不是我们做了那么多，最后却只感动了自己\n\n而是我们所做的一切，都只是为了感动自己","source":"_posts/sgbtLC.md","raw":"---\ntitle: 那些萦绕在我记忆里的一些歌曲(未完 更于2017-04-27) \ndate: 2017-4-27 00:19:49\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - Leo\n    - 音乐\n---\n\n> 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。\n\n![walk_away](/Image/walk_away.jpg)\n\n<!--more-->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=277722&auto=0&height=66\"></iframe>\n\n蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。  \n\n长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。\n\n一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。\n\n有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。\n\n印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=165364&auto=0&height=66\"></iframe> \n\n汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。\n\n现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。\n\n讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。\n\n当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。\n\n现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。\n\n像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。”\n\n我始终觉得，让你困在过去的歌曲，不是你应该听的歌。\n\n我在听的，多半是这段回不去的路，和这路上的每一步吧。\n\n\n<script type=\"text/javascript\" src=\"http://www.xiami.com/widget/player-single?uid=0&sid=380252&mode=js\"></script>\n\n梁静茹的歌总是会让你体会到那种纯粹的感情\n\n“我可以假装看不见，也可以偷偷的想念”\n\n“知了也睡了，安心的睡了” \n\n那时的我们，向往着这种连空气都会变得很轻松的感情。\n\n当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28191530&auto=0&height=66\"></iframe>\n\n当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。\n\n当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。\n\n在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。\n\n如果你想看一集动画片，你可能要点4-5次才能看完一集。\n\n想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。\n\n有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。\n\n守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。\n\n众筹的思想在小朋友的身上已经生根发芽了。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=69827&auto=0&height=66\"></iframe>\n\n那时我还听不懂。\n\n现在想想：\n\n“太多的借口”\n\n“太多的理由”\n\n“为了爱情我也背叛了所有”\n\n“如果你想离开我”\n\n“就别再畏畏缩缩”\n\n乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。\n\n可是仔细想想，如果真想离开你，还会找借口和理由吗？\n\n既已不再留恋，何必处处遮掩？\n\n你含泪看着对方的时候，又怎知对方不是在含泪望着你。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=307525&auto=0&height=66\"></iframe>  \n\n悄悄地喜欢一个人\n\n把握的恰到好处\n\n刚好瞒着他的同时，被全世界看穿了自己\n\n在那个人身上用尽了我们能表达出来的所有情绪\n\n把每一个电视剧里的故事都在脑海中排练了一遍\n\n一个不经意的动作，一句很自然的话\n\n能让自己对着自己在脑海中低语很久\n\n思绪随着天色浅浅有了光亮\n\n才叹着气睡去\n\n其实，我们只是刚好在那个时候\n\n需要完全陌生的人\n\n来感动自己\n\n不是我们做了那么多，最后却只感动了自己\n\n而是我们所做的一切，都只是为了感动自己","slug":"sgbtLC","published":1,"updated":"2017-06-01T05:53:59.796Z","photos":[],"link":"","_id":"cj3e9p4vy000dhgtzw50u5cnt","content":"<blockquote>\n<p>他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。</p>\n</blockquote>\n<p><img src=\"/Image/walk_away.jpg\" alt=\"walk_away\"></p>\n<a id=\"more\"></a>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=277722&auto=0&height=66\"></iframe>\n\n<p>蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。  </p>\n<p>长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。</p>\n<p>一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。</p>\n<p>有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。</p>\n<p>印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=165364&auto=0&height=66\"></iframe> \n\n<p>汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。</p>\n<p>现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。</p>\n<p>讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。</p>\n<p>当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。</p>\n<p>现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。</p>\n<p>像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。”</p>\n<p>我始终觉得，让你困在过去的歌曲，不是你应该听的歌。</p>\n<p>我在听的，多半是这段回不去的路，和这路上的每一步吧。</p>\n<script type=\"text/javascript\" src=\"http://www.xiami.com/widget/player-single?uid=0&sid=380252&mode=js\"></script>\n\n<p>梁静茹的歌总是会让你体会到那种纯粹的感情</p>\n<p>“我可以假装看不见，也可以偷偷的想念”</p>\n<p>“知了也睡了，安心的睡了” </p>\n<p>那时的我们，向往着这种连空气都会变得很轻松的感情。</p>\n<p>当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28191530&auto=0&height=66\"></iframe>\n\n<p>当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。</p>\n<p>当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。</p>\n<p>在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。</p>\n<p>如果你想看一集动画片，你可能要点4-5次才能看完一集。</p>\n<p>想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。</p>\n<p>有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。</p>\n<p>守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。</p>\n<p>众筹的思想在小朋友的身上已经生根发芽了。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=69827&auto=0&height=66\"></iframe>\n\n<p>那时我还听不懂。</p>\n<p>现在想想：</p>\n<p>“太多的借口”</p>\n<p>“太多的理由”</p>\n<p>“为了爱情我也背叛了所有”</p>\n<p>“如果你想离开我”</p>\n<p>“就别再畏畏缩缩”</p>\n<p>乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。</p>\n<p>可是仔细想想，如果真想离开你，还会找借口和理由吗？</p>\n<p>既已不再留恋，何必处处遮掩？</p>\n<p>你含泪看着对方的时候，又怎知对方不是在含泪望着你。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=307525&auto=0&height=66\"></iframe>  \n\n<p>悄悄地喜欢一个人</p>\n<p>把握的恰到好处</p>\n<p>刚好瞒着他的同时，被全世界看穿了自己</p>\n<p>在那个人身上用尽了我们能表达出来的所有情绪</p>\n<p>把每一个电视剧里的故事都在脑海中排练了一遍</p>\n<p>一个不经意的动作，一句很自然的话</p>\n<p>能让自己对着自己在脑海中低语很久</p>\n<p>思绪随着天色浅浅有了光亮</p>\n<p>才叹着气睡去</p>\n<p>其实，我们只是刚好在那个时候</p>\n<p>需要完全陌生的人</p>\n<p>来感动自己</p>\n<p>不是我们做了那么多，最后却只感动了自己</p>\n<p>而是我们所做的一切，都只是为了感动自己</p>\n","excerpt":"<blockquote>\n<p>他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。</p>\n</blockquote>\n<p><img src=\"/Image/walk_away.jpg\" alt=\"walk_away\"></p>","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=277722&auto=0&height=66\"></iframe>\n\n<p>蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。  </p>\n<p>长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。</p>\n<p>一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。</p>\n<p>有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。</p>\n<p>印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=165364&auto=0&height=66\"></iframe> \n\n<p>汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。</p>\n<p>现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。</p>\n<p>讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。</p>\n<p>当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。</p>\n<p>现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。</p>\n<p>像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。”</p>\n<p>我始终觉得，让你困在过去的歌曲，不是你应该听的歌。</p>\n<p>我在听的，多半是这段回不去的路，和这路上的每一步吧。</p>\n<script type=\"text/javascript\" src=\"http://www.xiami.com/widget/player-single?uid=0&sid=380252&mode=js\"></script>\n\n<p>梁静茹的歌总是会让你体会到那种纯粹的感情</p>\n<p>“我可以假装看不见，也可以偷偷的想念”</p>\n<p>“知了也睡了，安心的睡了” </p>\n<p>那时的我们，向往着这种连空气都会变得很轻松的感情。</p>\n<p>当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28191530&auto=0&height=66\"></iframe>\n\n<p>当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。</p>\n<p>当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。</p>\n<p>在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。</p>\n<p>如果你想看一集动画片，你可能要点4-5次才能看完一集。</p>\n<p>想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。</p>\n<p>有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。</p>\n<p>守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。</p>\n<p>众筹的思想在小朋友的身上已经生根发芽了。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=69827&auto=0&height=66\"></iframe>\n\n<p>那时我还听不懂。</p>\n<p>现在想想：</p>\n<p>“太多的借口”</p>\n<p>“太多的理由”</p>\n<p>“为了爱情我也背叛了所有”</p>\n<p>“如果你想离开我”</p>\n<p>“就别再畏畏缩缩”</p>\n<p>乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。</p>\n<p>可是仔细想想，如果真想离开你，还会找借口和理由吗？</p>\n<p>既已不再留恋，何必处处遮掩？</p>\n<p>你含泪看着对方的时候，又怎知对方不是在含泪望着你。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=307525&auto=0&height=66\"></iframe>  \n\n<p>悄悄地喜欢一个人</p>\n<p>把握的恰到好处</p>\n<p>刚好瞒着他的同时，被全世界看穿了自己</p>\n<p>在那个人身上用尽了我们能表达出来的所有情绪</p>\n<p>把每一个电视剧里的故事都在脑海中排练了一遍</p>\n<p>一个不经意的动作，一句很自然的话</p>\n<p>能让自己对着自己在脑海中低语很久</p>\n<p>思绪随着天色浅浅有了光亮</p>\n<p>才叹着气睡去</p>\n<p>其实，我们只是刚好在那个时候</p>\n<p>需要完全陌生的人</p>\n<p>来感动自己</p>\n<p>不是我们做了那么多，最后却只感动了自己</p>\n<p>而是我们所做的一切，都只是为了感动自己</p>"},{"title":"昭奚旧草  2016-12-26","date":"2016-12-25T22:31:20.000Z","layout":"post","comments":1,"reward":true,"_content":"> **“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”**\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=35566987&auto=0&height=66\"></iframe>\n\n一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。\n\n可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。\n\n<!--more-->\n\n> \"有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。\" 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。\n\n﻿\n> 从不知相思，安知相思死。﻿﻿\n\n﻿\n> “我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”\n“然后呢？”\n“然后，她死在了长大嫁人的那一日。”\n\n﻿\n> 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。﻿﻿\n\n﻿\n> 但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。﻿﻿\n\n﻿\n> 我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。﻿﻿\n\n﻿\n> “奚山，什么是命？”\n“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。”\n\n﻿\n> 她欢喜他，叶公好龙，他爱着她，尾生抱柱。﻿﻿\n\n﻿\n> 我只是想再瞧你一瞧，我怕再也瞧你不到。﻿﻿\n\n﻿\n> 更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。﻿﻿\n\n﻿\n> 君当如何，妾当如何。君是乱臣，妾做贼子。﻿﻿\n\n﻿\n> 三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。”\n\n﻿\n> 我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。﻿﻿\n\n﻿\n> 没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。﻿\n\n﻿\n> 从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。﻿﻿\n\n﻿\n> 君心何坚决，到死无两意。﻿﻿\n\n﻿\n> 他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。﻿﻿\n\n﻿\n> 打散的，寂寞之徒；忘却的，年岁偶驻。﻿﻿\n\n﻿\n> 我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。﻿﻿\n\n﻿\n> 那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。﻿﻿\n\n﻿\n> 我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。﻿\n\n﻿\n> 我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。﻿\n\n﻿\n> “须知万物皆有少年早衰之时，焉知我便强过谁？”\n“你是我的妻子，自然强过这世间千千万。”\n\n﻿\n>  她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。﻿\n\n﻿\n> 她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”\n风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。﻿\n她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。”\n\n﻿\n> 本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。﻿\n你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。﻿\n\n﻿\n> 她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。﻿\n\n﻿\n> 百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。﻿\n\n﻿\n> 爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。﻿\n\n﻿\n> 人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。﻿\n\n﻿\n>  我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。﻿\n\n﻿\n> 卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。﻿\n\n﻿\n>  我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。﻿\n而非，从深深喜欢你到深深爱慕你。﻿\n\n﻿\n> 大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。﻿\n\n﻿\n> 火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。”\n\n﻿\n> “世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”\n“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。”﻿\n\n﻿\n> 她用一双眼望着苍天，与它对视。﻿\n\n﻿\n> 她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。\n是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！”\n\n\n﻿\n> 先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。﻿\n\n﻿\n> “他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”\n\n﻿\n> 你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。﻿\n\n﻿\n> 我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。﻿\n\n﻿\n> 天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。\n\n文中句子取自：[《昭奚旧草》 摘抄：愿以百年挽朝夕](http://www.jianshu.com/p/e2b0f761df24)\n","source":"_posts/zhaoxijiucao.md","raw":"---\ntitle: 昭奚旧草  2016-12-26\ndate: 2016-12-26 06:31:20\nlayout: post\ncomments: true\nreward: true\ntags:\n    - Leo\n    - 音乐\n---\n> **“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”**\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=35566987&auto=0&height=66\"></iframe>\n\n一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。\n\n可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。\n\n<!--more-->\n\n> \"有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。\" 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。\n\n﻿\n> 从不知相思，安知相思死。﻿﻿\n\n﻿\n> “我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”\n“然后呢？”\n“然后，她死在了长大嫁人的那一日。”\n\n﻿\n> 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。﻿﻿\n\n﻿\n> 但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。﻿﻿\n\n﻿\n> 我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。﻿﻿\n\n﻿\n> “奚山，什么是命？”\n“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。”\n\n﻿\n> 她欢喜他，叶公好龙，他爱着她，尾生抱柱。﻿﻿\n\n﻿\n> 我只是想再瞧你一瞧，我怕再也瞧你不到。﻿﻿\n\n﻿\n> 更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。﻿﻿\n\n﻿\n> 君当如何，妾当如何。君是乱臣，妾做贼子。﻿﻿\n\n﻿\n> 三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。”\n\n﻿\n> 我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。﻿﻿\n\n﻿\n> 没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。﻿\n\n﻿\n> 从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。﻿﻿\n\n﻿\n> 君心何坚决，到死无两意。﻿﻿\n\n﻿\n> 他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。﻿﻿\n\n﻿\n> 打散的，寂寞之徒；忘却的，年岁偶驻。﻿﻿\n\n﻿\n> 我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。﻿﻿\n\n﻿\n> 那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。﻿﻿\n\n﻿\n> 我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。﻿\n\n﻿\n> 我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。﻿\n\n﻿\n> “须知万物皆有少年早衰之时，焉知我便强过谁？”\n“你是我的妻子，自然强过这世间千千万。”\n\n﻿\n>  她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。﻿\n\n﻿\n> 她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”\n风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。﻿\n她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。”\n\n﻿\n> 本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。﻿\n你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。﻿\n\n﻿\n> 她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。﻿\n\n﻿\n> 百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。﻿\n\n﻿\n> 爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。﻿\n\n﻿\n> 人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。﻿\n\n﻿\n>  我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。﻿\n\n﻿\n> 卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。﻿\n\n﻿\n>  我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。﻿\n而非，从深深喜欢你到深深爱慕你。﻿\n\n﻿\n> 大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。﻿\n\n﻿\n> 火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。”\n\n﻿\n> “世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”\n“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。”﻿\n\n﻿\n> 她用一双眼望着苍天，与它对视。﻿\n\n﻿\n> 她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。\n是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！”\n\n\n﻿\n> 先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。﻿\n\n﻿\n> “他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”\n\n﻿\n> 你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。﻿\n\n﻿\n> 我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。﻿\n\n﻿\n> 天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。\n\n文中句子取自：[《昭奚旧草》 摘抄：愿以百年挽朝夕](http://www.jianshu.com/p/e2b0f761df24)\n","slug":"zhaoxijiucao","published":1,"updated":"2017-06-01T05:53:59.797Z","photos":[],"link":"","_id":"cj3e9p4w1000ehgtzew4r5p3a","content":"<blockquote>\n<p><strong>“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”</strong></p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=35566987&auto=0&height=66\"></iframe>\n\n<p>一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。</p>\n<p>可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>“有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。” 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>从不知相思，安知相思死。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”<br>“然后呢？”<br>“然后，她死在了长大嫁人的那一日。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“奚山，什么是命？”<br>“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她欢喜他，叶公好龙，他爱着她，尾生抱柱。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我只是想再瞧你一瞧，我怕再也瞧你不到。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>君当如何，妾当如何。君是乱臣，妾做贼子。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>君心何坚决，到死无两意。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>打散的，寂寞之徒；忘却的，年岁偶驻。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“须知万物皆有少年早衰之时，焉知我便强过谁？”<br>“你是我的妻子，自然强过这世间千千万。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”<br>风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。﻿<br>她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。﻿<br>你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。﻿<br>而非，从深深喜欢你到深深爱慕你。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”<br>“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。”﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她用一双眼望着苍天，与它对视。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。<br>是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。</p>\n</blockquote>\n<p>文中句子取自：<a href=\"http://www.jianshu.com/p/e2b0f761df24\" target=\"_blank\" rel=\"external\">《昭奚旧草》 摘抄：愿以百年挽朝夕</a></p>\n","excerpt":"<blockquote>\n<p><strong>“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”</strong></p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=35566987&auto=0&height=66\"></iframe>\n\n<p>一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。</p>\n<p>可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。</p>","more":"<blockquote>\n<p>“有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。” 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>从不知相思，安知相思死。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”<br>“然后呢？”<br>“然后，她死在了长大嫁人的那一日。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“奚山，什么是命？”<br>“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她欢喜他，叶公好龙，他爱着她，尾生抱柱。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我只是想再瞧你一瞧，我怕再也瞧你不到。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>君当如何，妾当如何。君是乱臣，妾做贼子。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>君心何坚决，到死无两意。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>打散的，寂寞之徒；忘却的，年岁偶驻。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“须知万物皆有少年早衰之时，焉知我便强过谁？”<br>“你是我的妻子，自然强过这世间千千万。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”<br>风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。﻿<br>她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。﻿<br>你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。﻿<br>而非，从深深喜欢你到深深爱慕你。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”<br>“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。”﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她用一双眼望着苍天，与它对视。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。<br>是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。</p>\n</blockquote>\n<p>文中句子取自：<a href=\"http://www.jianshu.com/p/e2b0f761df24\">《昭奚旧草》 摘抄：愿以百年挽朝夕</a></p>"},{"title":"分享一首歌","date":"2016-12-01T01:24:10.000Z","layout":"post","comments":1,"_content":"\n“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”\n“为什么要嚣张？”\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe>\n<!--more-->\n\n\n你也许不会再出现在我的文字里了。\n其实你也有很久都没出现在我的文字里了：）","source":"_posts/zyt.md","raw":"---\ntitle: 分享一首歌\ndate: 2016-12-01 09:24:10\nlayout: post\ncomments: true\n# reward: true\ntags:\n    - 音乐\n---\n\n“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”\n“为什么要嚣张？”\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe>\n<!--more-->\n\n\n你也许不会再出现在我的文字里了。\n其实你也有很久都没出现在我的文字里了：）","slug":"zyt","published":1,"updated":"2017-06-01T05:53:59.798Z","photos":[],"link":"","_id":"cj3e9p4w3000ghgtz35qetw6j","content":"<p>“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”<br>“为什么要嚣张？”</p>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe><br><a id=\"more\"></a></p>\n<p>你也许不会再出现在我的文字里了。<br>其实你也有很久都没出现在我的文字里了：）</p>\n","excerpt":"<p>“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”<br>“为什么要嚣张？”</p>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe><br>","more":"</p>\n<p>你也许不会再出现在我的文字里了。<br>其实你也有很久都没出现在我的文字里了：）</p>"},{"layout":"post","title":"林宥嘉：她説好：)","date":"2016-11-29T15:56:00.000Z","comments":1,"_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe>\n<!--more-->\n> 我不介意你慢动作\n> 我相信你正在与我相遇的路上\n> 马不停蹄\n> 所以当我拥抱整个世界的孤寂\n> 也像拥抱着你\n<br\\>\n> 我不介意你慢动作\n> 也不介意这次先「擦肩而过」\n> 某天我们总会遇到对方然后说\n> 原来\n> 是你噢\n\n　　　　　　　　　　　         -『致姗姗来迟的你』","source":"_posts/林宥嘉：他説好：）.md","raw":"---\nlayout: post\ntitle: 林宥嘉：她説好：)\ndate: 2016-11-29 23:56\ncomments: true\ntags: \n\t- Leo\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe>\n<!--more-->\n> 我不介意你慢动作\n> 我相信你正在与我相遇的路上\n> 马不停蹄\n> 所以当我拥抱整个世界的孤寂\n> 也像拥抱着你\n<br\\>\n> 我不介意你慢动作\n> 也不介意这次先「擦肩而过」\n> 某天我们总会遇到对方然后说\n> 原来\n> 是你噢\n\n　　　　　　　　　　　         -『致姗姗来迟的你』","slug":"林宥嘉：他説好：）","published":1,"updated":"2017-06-01T05:53:59.799Z","photos":[],"link":"","_id":"cj3e9p4w6000ihgtz0yg7yguy","content":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe><br><a id=\"more\"></a></p>\n<blockquote>\n<p>我不介意你慢动作<br>我相信你正在与我相遇的路上<br>马不停蹄<br>所以当我拥抱整个世界的孤寂<br>也像拥抱着你<br><br\\><br>我不介意你慢动作<br>也不介意这次先「擦肩而过」<br>某天我们总会遇到对方然后说<br>原来<br>是你噢</br\\></p>\n</blockquote>\n<p>　　　　　　　　　　　         -『致姗姗来迟的你』</p>\n","excerpt":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe><br>","more":"</p>\n<blockquote>\n<p>我不介意你慢动作<br>我相信你正在与我相遇的路上<br>马不停蹄<br>所以当我拥抱整个世界的孤寂<br>也像拥抱着你<br><br\\><br>我不介意你慢动作<br>也不介意这次先「擦肩而过」<br>某天我们总会遇到对方然后说<br>原来<br>是你噢</p>\n</blockquote>\n<p>　　　　　　　　　　　         -『致姗姗来迟的你』</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj3e9p4vk0005hgtzc9ve9yrx","tag_id":"cj3e9p4ve0003hgtzg5s3337q","_id":"cj3e9p4vr0008hgtzmytydr4f"},{"post_id":"cj3e9p4v50000hgtz35bxma9n","tag_id":"cj3e9p4ve0003hgtzg5s3337q","_id":"cj3e9p4vu000ahgtzuchbur2e"},{"post_id":"cj3e9p4va0002hgtz76yt24qf","tag_id":"cj3e9p4ve0003hgtzg5s3337q","_id":"cj3e9p4w5000hhgtzjvm8ppp2"},{"post_id":"cj3e9p4va0002hgtz76yt24qf","tag_id":"cj3e9p4vx000chgtziu790mab","_id":"cj3e9p4w7000jhgtzq73w7g6a"},{"post_id":"cj3e9p4w3000ghgtz35qetw6j","tag_id":"cj3e9p4vx000chgtziu790mab","_id":"cj3e9p4w8000lhgtz31x8gvai"},{"post_id":"cj3e9p4vi0004hgtzwlu9upi7","tag_id":"cj3e9p4w3000fhgtzkfqfi8vr","_id":"cj3e9p4wa000mhgtzsr63n00g"},{"post_id":"cj3e9p4w6000ihgtz0yg7yguy","tag_id":"cj3e9p4w3000fhgtzkfqfi8vr","_id":"cj3e9p4wd000ohgtz8qz6smgz"},{"post_id":"cj3e9p4vn0006hgtz0nr80sgc","tag_id":"cj3e9p4w7000khgtzvogso9bf","_id":"cj3e9p4wg000qhgtzvuwvdl4c"},{"post_id":"cj3e9p4vn0006hgtz0nr80sgc","tag_id":"cj3e9p4wb000nhgtz1579w1dm","_id":"cj3e9p4wh000rhgtz0ugkzhse"},{"post_id":"cj3e9p4vs0009hgtzzvt979xi","tag_id":"cj3e9p4w7000khgtzvogso9bf","_id":"cj3e9p4wi000thgtzl022vuhg"},{"post_id":"cj3e9p4vv000bhgtzw1ul8lt7","tag_id":"cj3e9p4w7000khgtzvogso9bf","_id":"cj3e9p4wj000vhgtz44lvxm0d"},{"post_id":"cj3e9p4vy000dhgtzw50u5cnt","tag_id":"cj3e9p4w3000fhgtzkfqfi8vr","_id":"cj3e9p4wk000xhgtzt52ozwpf"},{"post_id":"cj3e9p4vy000dhgtzw50u5cnt","tag_id":"cj3e9p4vx000chgtziu790mab","_id":"cj3e9p4wk000yhgtztchddzm5"},{"post_id":"cj3e9p4w1000ehgtzew4r5p3a","tag_id":"cj3e9p4w3000fhgtzkfqfi8vr","_id":"cj3e9p4wm000zhgtz7f7ic56j"},{"post_id":"cj3e9p4w1000ehgtzew4r5p3a","tag_id":"cj3e9p4vx000chgtziu790mab","_id":"cj3e9p4wm0010hgtzb43s9lyd"}],"Tag":[{"name":"工具","_id":"cj3e9p4ve0003hgtzg5s3337q"},{"name":"音乐","_id":"cj3e9p4vx000chgtziu790mab"},{"name":"Leo","_id":"cj3e9p4w3000fhgtzkfqfi8vr"},{"name":"python","_id":"cj3e9p4w7000khgtzvogso9bf"},{"name":"反人类","_id":"cj3e9p4wb000nhgtz1579w1dm"}]}}